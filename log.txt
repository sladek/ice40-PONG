
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `pong_game.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: pong_game.v
Parsing Verilog input from `pong_game.v' to AST representation.
Generating RTLIL representation for module `\pong_game'.
Successfully finished Verilog frontend.

-- Parsing `pong.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: pong.v
Parsing Verilog input from `pong.v' to AST representation.
Generating RTLIL representation for module `\pong'.
Successfully finished Verilog frontend.

-- Parsing `VGA_gen.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: VGA_gen.v
Parsing Verilog input from `VGA_gen.v' to AST representation.
Generating RTLIL representation for module `\VGA_gen'.
Successfully finished Verilog frontend.

-- Parsing `button.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: button.v
Parsing Verilog input from `button.v' to AST representation.
Generating RTLIL representation for module `\button'.
Successfully finished Verilog frontend.

-- Parsing `shift_register.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: shift_register.v
Parsing Verilog input from `shift_register.v' to AST representation.
Generating RTLIL representation for module `\shift_register'.
Successfully finished Verilog frontend.

-- Parsing `osd.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: osd.v
Parsing Verilog input from `osd.v' to AST representation.
Generating RTLIL representation for module `\osd'.
Successfully finished Verilog frontend.

-- Parsing `osd_time_base.v' using frontend `verilog' --

7. Executing Verilog-2005 frontend: osd_time_base.v
Parsing Verilog input from `osd_time_base.v' to AST representation.
Generating RTLIL representation for module `\osd_time_base'.
Successfully finished Verilog frontend.

-- Parsing `character_memory.v' using frontend `verilog' --

8. Executing Verilog-2005 frontend: character_memory.v
Parsing Verilog input from `character_memory.v' to AST representation.
Generating RTLIL representation for module `\character_memory'.
Successfully finished Verilog frontend.

-- Parsing `score_register.v' using frontend `verilog' --

9. Executing Verilog-2005 frontend: score_register.v
Parsing Verilog input from `score_register.v' to AST representation.
Generating RTLIL representation for module `\score_register'.
Successfully finished Verilog frontend.

-- Parsing `clock_generator.v' using frontend `verilog' --

10. Executing Verilog-2005 frontend: clock_generator.v
Parsing Verilog input from `clock_generator.v' to AST representation.
Generating RTLIL representation for module `\clock_generator'.
Successfully finished Verilog frontend.

-- Parsing `bcd_counter.v' using frontend `verilog' --

11. Executing Verilog-2005 frontend: bcd_counter.v
Parsing Verilog input from `bcd_counter.v' to AST representation.
Generating RTLIL representation for module `\bcd_counter'.
Successfully finished Verilog frontend.

-- Parsing `bcd_8bit_counter.v' using frontend `verilog' --

12. Executing Verilog-2005 frontend: bcd_8bit_counter.v
Parsing Verilog input from `bcd_8bit_counter.v' to AST representation.
Generating RTLIL representation for module `\bcd_8bit_counter'.
Successfully finished Verilog frontend.

-- Parsing `reset_gen.v' using frontend `verilog' --

13. Executing Verilog-2005 frontend: reset_gen.v
Parsing Verilog input from `reset_gen.v' to AST representation.
Generating RTLIL representation for module `\reset_gen'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top pong_game -blif pong_game.blif' --

14. Executing SYNTH_ICE40 pass.

14.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

14.2. Executing HIERARCHY pass (managing design hierarchy).

14.2.1. Analyzing design hierarchy..
Top module:  \pong_game
Used module:     \reset_gen
Used module:     \clock_generator
Used module:     \osd
Used module:         \score_register
Used module:             \bcd_8bit_counter
Used module:                 \bcd_counter
Used module:         \osd_time_base
Used module:         \shift_register
Used module:         \character_memory
Used module:     \pong
Used module:     \VGA_gen
Used module:     \button

14.2.2. Analyzing design hierarchy..
Top module:  \pong_game
Used module:     \reset_gen
Used module:     \clock_generator
Used module:     \osd
Used module:         \score_register
Used module:             \bcd_8bit_counter
Used module:                 \bcd_counter
Used module:         \osd_time_base
Used module:         \shift_register
Used module:         \character_memory
Used module:     \pong
Used module:     \VGA_gen
Used module:     \button
Removed 0 unused modules.

14.3. Executing PROC pass (convert processes to netlists).

14.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

14.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$bcd_counter.v:15$207 in module bcd_counter.
Marked 1 switch rules as full_case in process $proc$clock_generator.v:63$204 in module clock_generator.
Marked 8 switch rules as full_case in process $proc$score_register.v:44$194 in module score_register.
Marked 1 switch rules as full_case in process $proc$score_register.v:27$188 in module score_register.
Marked 1 switch rules as full_case in process $proc$character_memory.v:14$187 in module character_memory.
Marked 2 switch rules as full_case in process $proc$osd_time_base.v:19$179 in module osd_time_base.
Marked 1 switch rules as full_case in process $proc$osd.v:89$169 in module osd.
Marked 2 switch rules as full_case in process $proc$osd.v:82$166 in module osd.
Marked 1 switch rules as full_case in process $proc$osd.v:76$163 in module osd.
Marked 1 switch rules as full_case in process $proc$osd.v:70$161 in module osd.
Marked 1 switch rules as full_case in process $proc$shift_register.v:16$129 in module shift_register.
Marked 7 switch rules as full_case in process $proc$VGA_gen.v:57$91 in module VGA_gen.
Marked 1 switch rules as full_case in process $proc$pong.v:167$85 in module pong.
Marked 3 switch rules as full_case in process $proc$pong.v:140$78 in module pong.
Marked 1 switch rules as full_case in process $proc$pong.v:124$68 in module pong.
Marked 1 switch rules as full_case in process $proc$pong.v:115$67 in module pong.
Marked 5 switch rules as full_case in process $proc$pong.v:89$66 in module pong.
Marked 1 switch rules as full_case in process $proc$pong.v:75$61 in module pong.
Removed a total of 0 dead cases.

14.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\reset_gen.$proc$reset_gen.v:16$215'.
  Set init value: \rst_cnt = 4'0000
Found init rule in `\bcd_counter.$proc$bcd_counter.v:12$211'.
  Set init value: \tc = 1'0
Found init rule in `\bcd_counter.$proc$bcd_counter.v:11$210'.
  Set init value: \q = 4'0000
Found init rule in `\osd_time_base.$proc$osd_time_base.v:17$186'.
  Set init value: \pos_count = 4'0000
Found init rule in `\osd.$proc$osd.v:67$178'.
  Set init value: \clock_divider = 1'0
Found init rule in `\osd.$proc$osd.v:66$177'.
  Set init value: \char_line_address = 3'000
Found init rule in `\osd.$proc$osd.v:63$176'.
  Set init value: \char_line_counter_r = 2'00
Found init rule in `\shift_register.$proc$shift_register.v:15$130'.
  Set init value: \tmp = 8'00000000
Found init rule in `\button.$proc$button.v:17$128'.
  Set init value: \clk_div = 10'0000000000
Found init rule in `\button.$proc$button.v:16$127'.
  Set init value: \debounce_cnt = 15'000000000000000
Found init rule in `\VGA_gen.$proc$VGA_gen.v:55$118'.
  Set init value: \eof_r = 1'0
Found init rule in `\VGA_gen.$proc$VGA_gen.v:54$117'.
  Set init value: \disp_en = 1'0
Found init rule in `\VGA_gen.$proc$VGA_gen.v:51$116'.
  Set init value: \c_row = 10'0000000000
Found init rule in `\VGA_gen.$proc$VGA_gen.v:50$115'.
  Set init value: \c_col = 10'0000000000
Found init rule in `\VGA_gen.$proc$VGA_gen.v:49$114'.
  Set init value: \rst = 1'0
Found init rule in `\VGA_gen.$proc$VGA_gen.v:48$113'.
  Set init value: \timer_t = 8'00000000
Found init rule in `\pong.$proc$pong.v:36$88'.
  Set init value: \run = 1'0

14.3.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \show_line_start in `\osd.$proc$osd.v:89$169'.
Found async reset \show_line_start in `\osd.$proc$osd.v:82$166'.
Found async reset \osd_start in `\osd.$proc$osd.v:70$161'.
Found async reset \reset_n in `\pong.$proc$pong.v:140$78'.
Found async reset \fail in `\pong.$proc$pong.v:140$78'.
Found async reset \run in `\pong.$proc$pong.v:124$68'.
Found async reset \run in `\pong.$proc$pong.v:75$61'.

14.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\reset_gen.$proc$reset_gen.v:16$215'.
     1/1: $1\rst_cnt[3:0]
Creating decoders for process `\reset_gen.$proc$reset_gen.v:20$212'.
     1/1: $0\rst_cnt[3:0]
Creating decoders for process `\bcd_counter.$proc$bcd_counter.v:12$211'.
     1/1: $1\tc[0:0]
Creating decoders for process `\bcd_counter.$proc$bcd_counter.v:11$210'.
     1/1: $2\q[3:0]
Creating decoders for process `\bcd_counter.$proc$bcd_counter.v:15$207'.
     1/3: $1\q[3:0]
     2/3: $0\q[3:0]
     3/3: $0\tc[0:0]
Creating decoders for process `\clock_generator.$proc$clock_generator.v:63$204'.
     1/1: $0\increment_counter[18:0]
Creating decoders for process `\score_register.$proc$score_register.v:20$203'.
     1/1: $0\lives[4:0]
Creating decoders for process `\score_register.$proc$score_register.v:44$194'.
     1/9: $8\level[3:0]
     2/9: $7\level[3:0]
     3/9: $6\level[3:0]
     4/9: $5\level[3:0]
     5/9: $4\level[3:0]
     6/9: $3\level[3:0]
     7/9: $2\level[3:0]
     8/9: $1\level[3:0]
     9/9: $0\level[3:0]
Creating decoders for process `\score_register.$proc$score_register.v:27$188'.
     1/2: $1\data_o[3:0]
     2/2: $0\data_o[3:0]
Creating decoders for process `\character_memory.$proc$character_memory.v:14$187'.
     1/2: $1\data[7:0]
     2/2: $0\data[7:0]
Creating decoders for process `\osd_time_base.$proc$osd_time_base.v:17$186'.
     1/1: $1\pos_count[3:0]
Creating decoders for process `\osd_time_base.$proc$osd_time_base.v:19$179'.
     1/1: $0\pos_count[3:0]
Creating decoders for process `\osd.$proc$osd.v:67$178'.
     1/1: $1\clock_divider[0:0]
Creating decoders for process `\osd.$proc$osd.v:66$177'.
     1/1: $1\char_line_address[2:0]
Creating decoders for process `\osd.$proc$osd.v:63$176'.
     1/1: $1\char_line_counter_r[1:0]
Creating decoders for process `\osd.$proc$osd.v:94$172'.
     1/1: $0\clock_divider[0:0]
Creating decoders for process `\osd.$proc$osd.v:89$169'.
     1/1: $0\char_line_address[2:0]
Creating decoders for process `\osd.$proc$osd.v:82$166'.
     1/1: $0\char_line_counter_r[1:0]
Creating decoders for process `\osd.$proc$osd.v:76$163'.
     1/1: $0\character_offset[9:0]
Creating decoders for process `\osd.$proc$osd.v:70$161'.
     1/1: $0\next_char_addr[3:0]
Creating decoders for process `\shift_register.$proc$shift_register.v:15$130'.
     1/1: $1\tmp[7:0]
Creating decoders for process `\shift_register.$proc$shift_register.v:16$129'.
     1/1: $0\tmp[7:0]
Creating decoders for process `\button.$proc$button.v:17$128'.
     1/1: $1\clk_div[9:0]
Creating decoders for process `\button.$proc$button.v:16$127'.
     1/1: $1\debounce_cnt[14:0]
Creating decoders for process `\button.$proc$button.v:27$121'.
     1/3: $0\debounce_cnt[14:0]
     2/3: $0\button_s[0:0]
     3/3: $0\button_r[0:0]
Creating decoders for process `\button.$proc$button.v:23$119'.
     1/1: $0\clk_div[9:0]
Creating decoders for process `\VGA_gen.$proc$VGA_gen.v:55$118'.
     1/1: $1\eof_r[0:0]
Creating decoders for process `\VGA_gen.$proc$VGA_gen.v:54$117'.
     1/1: $1\disp_en[0:0]
Creating decoders for process `\VGA_gen.$proc$VGA_gen.v:51$116'.
     1/1: $1\c_row[9:0]
Creating decoders for process `\VGA_gen.$proc$VGA_gen.v:50$115'.
     1/1: $1\c_col[9:0]
Creating decoders for process `\VGA_gen.$proc$VGA_gen.v:49$114'.
     1/1: $1\rst[0:0]
Creating decoders for process `\VGA_gen.$proc$VGA_gen.v:48$113'.
     1/1: $1\timer_t[7:0]
Creating decoders for process `\VGA_gen.$proc$VGA_gen.v:57$91'.
     1/10: $0\eof_r[0:0]
     2/10: $0\disp_en[0:0]
     3/10: $0\c_ver[9:0]
     4/10: $0\c_hor[9:0]
     5/10: $0\c_row[9:0]
     6/10: $0\c_col[9:0]
     7/10: $0\rst[0:0]
     8/10: $0\vga_vs_r[0:0]
     9/10: $0\timer_t[7:0]
    10/10: $0\vga_hs_r[0:0]
Creating decoders for process `\pong.$proc$pong.v:36$88'.
     1/1: $1\run[0:0]
Creating decoders for process `\pong.$proc$pong.v:172$87'.
     1/1: $0\next_state[1:0]
Creating decoders for process `\pong.$proc$pong.v:167$85'.
     1/1: $0\current_state[1:0]
Creating decoders for process `\pong.$proc$pong.v:140$78'.
     1/1: $0\paddle_position[9:0]
Creating decoders for process `\pong.$proc$pong.v:124$68'.
     1/2: $0\ball_y[9:0]
     2/2: $0\ball_x[9:0]
Creating decoders for process `\pong.$proc$pong.v:115$67'.
     1/1: $0\fail[0:0]
Creating decoders for process `\pong.$proc$pong.v:89$66'.
     1/2: $0\run[0:0]
     2/2: $0\vga_color_r[8:0]
Creating decoders for process `\pong.$proc$pong.v:75$61'.
     1/2: $0\ball_y_direction[0:0]
     2/2: $0\ball_x_direction[0:0]

14.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\score_register.\lives' from process `\score_register.$proc$score_register.v:20$203'.
No latch inferred for signal `\score_register.\level' from process `\score_register.$proc$score_register.v:44$194'.
No latch inferred for signal `\score_register.\data_o' from process `\score_register.$proc$score_register.v:27$188'.
No latch inferred for signal `\character_memory.\data' from process `\character_memory.$proc$character_memory.v:14$187'.
No latch inferred for signal `\pong.\next_state' from process `\pong.$proc$pong.v:172$87'.

14.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\reset_gen.\rst_cnt' using process `\reset_gen.$proc$reset_gen.v:20$212'.
  created $dff cell `$procdff$632' with positive edge clock.
Creating register for signal `\bcd_counter.\tc' using process `\bcd_counter.$proc$bcd_counter.v:15$207'.
  created $dff cell `$procdff$633' with positive edge clock.
Creating register for signal `\bcd_counter.\q' using process `\bcd_counter.$proc$bcd_counter.v:15$207'.
  created $dff cell `$procdff$634' with positive edge clock.
Creating register for signal `\clock_generator.\increment_counter' using process `\clock_generator.$proc$clock_generator.v:63$204'.
  created $dff cell `$procdff$635' with positive edge clock.
Creating register for signal `\osd_time_base.\pos_count' using process `\osd_time_base.$proc$osd_time_base.v:19$179'.
  created $dff cell `$procdff$636' with positive edge clock.
Creating register for signal `\osd.\clock_divider' using process `\osd.$proc$osd.v:94$172'.
  created $dff cell `$procdff$637' with positive edge clock.
Creating register for signal `\osd.\char_line_address' using process `\osd.$proc$osd.v:89$169'.
  created $adff cell `$procdff$638' with positive edge clock and positive level reset.
Creating register for signal `\osd.\char_line_counter_r' using process `\osd.$proc$osd.v:82$166'.
  created $adff cell `$procdff$639' with positive edge clock and positive level reset.
Creating register for signal `\osd.\character_offset' using process `\osd.$proc$osd.v:76$163'.
  created $dff cell `$procdff$640' with positive edge clock.
Creating register for signal `\osd.\next_char_addr' using process `\osd.$proc$osd.v:70$161'.
  created $adff cell `$procdff$641' with positive edge clock and positive level reset.
Creating register for signal `\shift_register.\tmp' using process `\shift_register.$proc$shift_register.v:16$129'.
  created $dff cell `$procdff$642' with positive edge clock.
Creating register for signal `\button.\button_r' using process `\button.$proc$button.v:27$121'.
  created $dff cell `$procdff$643' with positive edge clock.
Creating register for signal `\button.\button_s' using process `\button.$proc$button.v:27$121'.
  created $dff cell `$procdff$644' with positive edge clock.
Creating register for signal `\button.\debounce_cnt' using process `\button.$proc$button.v:27$121'.
  created $dff cell `$procdff$645' with positive edge clock.
Creating register for signal `\button.\clk_div' using process `\button.$proc$button.v:23$119'.
  created $dff cell `$procdff$646' with positive edge clock.
Creating register for signal `\VGA_gen.\vga_hs_r' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$647' with positive edge clock.
Creating register for signal `\VGA_gen.\timer_t' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$648' with positive edge clock.
Creating register for signal `\VGA_gen.\vga_vs_r' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$649' with positive edge clock.
Creating register for signal `\VGA_gen.\rst' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$650' with positive edge clock.
Creating register for signal `\VGA_gen.\c_col' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$651' with positive edge clock.
Creating register for signal `\VGA_gen.\c_row' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$652' with positive edge clock.
Creating register for signal `\VGA_gen.\c_hor' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$653' with positive edge clock.
Creating register for signal `\VGA_gen.\c_ver' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$654' with positive edge clock.
Creating register for signal `\VGA_gen.\disp_en' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$655' with positive edge clock.
Creating register for signal `\VGA_gen.\eof_r' using process `\VGA_gen.$proc$VGA_gen.v:57$91'.
  created $dff cell `$procdff$656' with positive edge clock.
Creating register for signal `\pong.\current_state' using process `\pong.$proc$pong.v:167$85'.
  created $dff cell `$procdff$657' with positive edge clock.
Creating register for signal `\pong.\paddle_position' using process `\pong.$proc$pong.v:140$78'.
  created $adff cell `$procdff$660' with positive edge clock and positive level reset.
Creating register for signal `\pong.\ball_x' using process `\pong.$proc$pong.v:124$68'.
  created $adff cell `$procdff$661' with negative edge clock and negative level reset.
Creating register for signal `\pong.\ball_y' using process `\pong.$proc$pong.v:124$68'.
  created $adff cell `$procdff$662' with negative edge clock and negative level reset.
Creating register for signal `\pong.\fail' using process `\pong.$proc$pong.v:115$67'.
  created $dff cell `$procdff$663' with positive edge clock.
Creating register for signal `\pong.\vga_color_r' using process `\pong.$proc$pong.v:89$66'.
  created $dff cell `$procdff$664' with positive edge clock.
Creating register for signal `\pong.\run' using process `\pong.$proc$pong.v:89$66'.
  created $dff cell `$procdff$665' with positive edge clock.
Creating register for signal `\pong.\ball_x_direction' using process `\pong.$proc$pong.v:75$61'.
  created $adff cell `$procdff$666' with positive edge clock and negative level reset.
Creating register for signal `\pong.\ball_y_direction' using process `\pong.$proc$pong.v:75$61'.
  created $adff cell `$procdff$667' with positive edge clock and negative level reset.

14.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `reset_gen.$proc$reset_gen.v:16$215'.
Found and cleaned up 1 empty switch in `\reset_gen.$proc$reset_gen.v:20$212'.
Removing empty process `reset_gen.$proc$reset_gen.v:20$212'.
Removing empty process `bcd_counter.$proc$bcd_counter.v:12$211'.
Removing empty process `bcd_counter.$proc$bcd_counter.v:11$210'.
Found and cleaned up 2 empty switches in `\bcd_counter.$proc$bcd_counter.v:15$207'.
Removing empty process `bcd_counter.$proc$bcd_counter.v:15$207'.
Found and cleaned up 1 empty switch in `\clock_generator.$proc$clock_generator.v:63$204'.
Removing empty process `clock_generator.$proc$clock_generator.v:63$204'.
Removing empty process `score_register.$proc$score_register.v:20$203'.
Found and cleaned up 8 empty switches in `\score_register.$proc$score_register.v:44$194'.
Removing empty process `score_register.$proc$score_register.v:44$194'.
Found and cleaned up 1 empty switch in `\score_register.$proc$score_register.v:27$188'.
Removing empty process `score_register.$proc$score_register.v:27$188'.
Found and cleaned up 1 empty switch in `\character_memory.$proc$character_memory.v:14$187'.
Removing empty process `character_memory.$proc$character_memory.v:14$187'.
Removing empty process `osd_time_base.$proc$osd_time_base.v:17$186'.
Found and cleaned up 2 empty switches in `\osd_time_base.$proc$osd_time_base.v:19$179'.
Removing empty process `osd_time_base.$proc$osd_time_base.v:19$179'.
Removing empty process `osd.$proc$osd.v:67$178'.
Removing empty process `osd.$proc$osd.v:66$177'.
Removing empty process `osd.$proc$osd.v:63$176'.
Removing empty process `osd.$proc$osd.v:94$172'.
Removing empty process `osd.$proc$osd.v:89$169'.
Found and cleaned up 1 empty switch in `\osd.$proc$osd.v:82$166'.
Removing empty process `osd.$proc$osd.v:82$166'.
Found and cleaned up 1 empty switch in `\osd.$proc$osd.v:76$163'.
Removing empty process `osd.$proc$osd.v:76$163'.
Removing empty process `osd.$proc$osd.v:70$161'.
Removing empty process `shift_register.$proc$shift_register.v:15$130'.
Found and cleaned up 1 empty switch in `\shift_register.$proc$shift_register.v:16$129'.
Removing empty process `shift_register.$proc$shift_register.v:16$129'.
Removing empty process `button.$proc$button.v:17$128'.
Removing empty process `button.$proc$button.v:16$127'.
Found and cleaned up 2 empty switches in `\button.$proc$button.v:27$121'.
Removing empty process `button.$proc$button.v:27$121'.
Removing empty process `button.$proc$button.v:23$119'.
Removing empty process `VGA_gen.$proc$VGA_gen.v:55$118'.
Removing empty process `VGA_gen.$proc$VGA_gen.v:54$117'.
Removing empty process `VGA_gen.$proc$VGA_gen.v:51$116'.
Removing empty process `VGA_gen.$proc$VGA_gen.v:50$115'.
Removing empty process `VGA_gen.$proc$VGA_gen.v:49$114'.
Removing empty process `VGA_gen.$proc$VGA_gen.v:48$113'.
Found and cleaned up 9 empty switches in `\VGA_gen.$proc$VGA_gen.v:57$91'.
Removing empty process `VGA_gen.$proc$VGA_gen.v:57$91'.
Removing empty process `pong.$proc$pong.v:36$88'.
Found and cleaned up 2 empty switches in `\pong.$proc$pong.v:172$87'.
Removing empty process `pong.$proc$pong.v:172$87'.
Found and cleaned up 1 empty switch in `\pong.$proc$pong.v:167$85'.
Removing empty process `pong.$proc$pong.v:167$85'.
Found and cleaned up 4 empty switches in `\pong.$proc$pong.v:140$78'.
Removing empty process `pong.$proc$pong.v:140$78'.
Found and cleaned up 2 empty switches in `\pong.$proc$pong.v:124$68'.
Removing empty process `pong.$proc$pong.v:124$68'.
Found and cleaned up 1 empty switch in `\pong.$proc$pong.v:115$67'.
Removing empty process `pong.$proc$pong.v:115$67'.
Found and cleaned up 7 empty switches in `\pong.$proc$pong.v:89$66'.
Removing empty process `pong.$proc$pong.v:89$66'.
Found and cleaned up 2 empty switches in `\pong.$proc$pong.v:75$61'.
Removing empty process `pong.$proc$pong.v:75$61'.
Cleaned up 49 empty switches.

14.4. Executing FLATTEN pass (flatten design).
Using template button for cells of type button.
Using template reset_gen for cells of type reset_gen.
Using template pong for cells of type pong.
Using template osd for cells of type osd.
Using template clock_generator for cells of type clock_generator.
Using template VGA_gen for cells of type VGA_gen.
Using template score_register for cells of type score_register.
Using template osd_time_base for cells of type osd_time_base.
Using template character_memory for cells of type character_memory.
Using template shift_register for cells of type shift_register.
Using template bcd_8bit_counter for cells of type bcd_8bit_counter.
Using template bcd_counter for cells of type bcd_counter.
<suppressed ~14 debug messages>
No more expansions possible.
Deleting now unused module reset_gen.
Deleting now unused module bcd_8bit_counter.
Deleting now unused module bcd_counter.
Deleting now unused module clock_generator.
Deleting now unused module score_register.
Deleting now unused module character_memory.
Deleting now unused module osd_time_base.
Deleting now unused module osd.
Deleting now unused module shift_register.
Deleting now unused module button.
Deleting now unused module VGA_gen.
Deleting now unused module pong.

14.5. Executing TRIBUF pass.

14.6. Executing DEMINOUT pass (demote inout ports to input or output).

14.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~24 debug messages>

14.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 31 unused cells and 252 unused wires.
<suppressed ~41 debug messages>

14.9. Executing CHECK pass (checking for obvious problems).
checking module pong_game..
found and reported 0 problems.

14.10. Executing OPT pass (performing simple optimizations).

14.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

14.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pong_game..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $techmap\rst_gen.$procmux$216: \rst_gen.rst_cnt -> { 1'1 \rst_gen.rst_cnt [2:0] }
  Analyzing evaluation results.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$237.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$240.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$243.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$246.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$249.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$252.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$255.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$261.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$264.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$267.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$270.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$273.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$276.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$282.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$285.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$288.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$291.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$294.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$300.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$303.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$306.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$309.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$315.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$318.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$321.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$327.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$330.
    dead port 1/2 on $mux $techmap\osd.score_register.$procmux$336.
Removed 28 multiplexer ports.
<suppressed ~34 debug messages>

14.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pong_game.
    New ctrl vector for $pmux cell $techmap\osd.character_memory.$procmux$354: { $auto$opt_reduce.cc:132:opt_mux$699 $auto$opt_reduce.cc:132:opt_mux$697 $auto$opt_reduce.cc:132:opt_mux$695 $auto$opt_reduce.cc:132:opt_mux$693 $auto$opt_reduce.cc:132:opt_mux$691 $techmap\osd.character_memory.$procmux$423_CMP $auto$opt_reduce.cc:132:opt_mux$689 $auto$opt_reduce.cc:132:opt_mux$687 $techmap\osd.character_memory.$procmux$415_CMP $techmap\osd.character_memory.$procmux$414_CMP $techmap\osd.character_memory.$procmux$413_CMP $techmap\osd.character_memory.$procmux$412_CMP $techmap\osd.character_memory.$procmux$411_CMP $techmap\osd.character_memory.$procmux$406_CMP $auto$opt_reduce.cc:132:opt_mux$685 $techmap\osd.character_memory.$procmux$401_CMP $auto$opt_reduce.cc:132:opt_mux$683 $techmap\osd.character_memory.$procmux$393_CMP $techmap\osd.character_memory.$procmux$392_CMP $techmap\osd.character_memory.$procmux$391_CMP $techmap\osd.character_memory.$procmux$383_CMP $auto$opt_reduce.cc:132:opt_mux$681 $auto$opt_reduce.cc:132:opt_mux$679 $auto$opt_reduce.cc:132:opt_mux$677 $auto$opt_reduce.cc:132:opt_mux$675 $techmap\osd.character_memory.$procmux$364_CMP $auto$opt_reduce.cc:132:opt_mux$673 $auto$opt_reduce.cc:132:opt_mux$671 $techmap\osd.character_memory.$procmux$358_CMP $techmap\osd.character_memory.$procmux$357_CMP $techmap\osd.character_memory.$procmux$356_CMP $auto$opt_reduce.cc:132:opt_mux$669 }
    New ctrl vector for $pmux cell $techmap\osd.score_register.$procmux$342: { $auto$opt_reduce.cc:132:opt_mux$701 $techmap\osd.score_register.$procmux$347_CMP $techmap\osd.score_register.$procmux$346_CMP $techmap\osd.score_register.$procmux$345_CMP $techmap\osd.score_register.$procmux$344_CMP $techmap\osd.score_register.$procmux$343_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$674: { $techmap\osd.character_memory.$procmux$503_CMP $techmap\osd.character_memory.$procmux$505_CMP $techmap\osd.character_memory.$procmux$504_CMP $techmap\osd.character_memory.$procmux$502_CMP $techmap\osd.character_memory.$procmux$501_CMP $techmap\osd.character_memory.$procmux$500_CMP $techmap\osd.character_memory.$procmux$454_CMP $techmap\osd.character_memory.$procmux$453_CMP $techmap\osd.character_memory.$procmux$452_CMP $techmap\osd.character_memory.$procmux$441_CMP $techmap\osd.character_memory.$procmux$440_CMP $techmap\osd.character_memory.$procmux$438_CMP $techmap\osd.character_memory.$procmux$437_CMP $techmap\osd.character_memory.$procmux$436_CMP $techmap\osd.character_memory.$procmux$433_CMP $techmap\osd.character_memory.$procmux$432_CMP $techmap\osd.character_memory.$procmux$365_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$692: { $techmap\osd.character_memory.$procmux$499_CMP $techmap\osd.character_memory.$procmux$506_CMP $techmap\osd.character_memory.$procmux$490_CMP $techmap\osd.character_memory.$procmux$487_CMP $techmap\osd.character_memory.$procmux$483_CMP $techmap\osd.character_memory.$procmux$482_CMP $techmap\osd.character_memory.$procmux$475_CMP $techmap\osd.character_memory.$procmux$463_CMP $techmap\osd.character_memory.$procmux$458_CMP $techmap\osd.character_memory.$procmux$451_CMP $techmap\osd.character_memory.$procmux$442_CMP $techmap\osd.character_memory.$procmux$439_CMP $techmap\osd.character_memory.$procmux$435_CMP $techmap\osd.character_memory.$procmux$434_CMP $techmap\osd.character_memory.$procmux$431_CMP $techmap\osd.character_memory.$procmux$427_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$700: { $techmap\osd.score_register.$procmux$348_CMP $techmap\osd.score_register.$procmux$352_CMP $techmap\osd.score_register.$procmux$351_CMP $techmap\osd.score_register.$procmux$350_CMP $techmap\osd.score_register.$procmux$349_CMP }
  Optimizing cells in module \pong_game.
Performed a total of 5 changes.

14.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \vga.eof_r = 1'0 to constant driver in module pong_game.
Promoting init spec \osd.score_register.bcd_8bit_counter.c1.tc = 1'0 to constant driver in module pong_game.
Promoted 2 init specs to constant drivers.

14.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 0 unused cells and 44 unused wires.
<suppressed ~1 debug messages>

14.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~2 debug messages>

14.10.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pong_game..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

14.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pong_game.
Performed a total of 0 changes.

14.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

14.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.10.16. Finished OPT passes. (There is nothing left to do.)

14.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 15) from port B of cell pong_game.$techmap\button_right.$eq$button.v:33$126 ($eq).
Removed top 14 bits (of 15) from port B of cell pong_game.$techmap\button_right.$add$button.v:28$122 ($add).
Removed top 3 bits (of 15) from port B of cell pong_game.$techmap\button_left.$eq$button.v:33$126 ($eq).
Removed top 14 bits (of 15) from port B of cell pong_game.$techmap\button_left.$add$button.v:28$122 ($add).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\rst_gen.$add$reset_gen.v:22$214 ($add).
Removed top 28 bits (of 32) from port Y of cell pong_game.$techmap\rst_gen.$add$reset_gen.v:22$214 ($add).
Removed top 1 bits (of 2) from port B of cell pong_game.$techmap\pong.$auto$proc_dff.cc:306:proc_dff$659 ($ne).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\pong.$sub$pong.v:152$84 ($sub).
Removed top 22 bits (of 32) from port Y of cell pong_game.$techmap\pong.$sub$pong.v:152$84 ($sub).
Removed top 8 bits (of 10) from port B of cell pong_game.$techmap\pong.$ne$pong.v:152$83 ($ne).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\pong.$add$pong.v:149$82 ($add).
Removed top 22 bits (of 32) from port Y of cell pong_game.$techmap\pong.$add$pong.v:149$82 ($add).
Removed top 22 bits (of 32) from port Y of cell pong_game.$techmap\pong.$add$pong.v:134$77 ($add).
Removed top 22 bits (of 32) from port B of cell pong_game.$techmap\pong.$add$pong.v:134$77 ($add).
Removed top 22 bits (of 32) from mux cell pong_game.$techmap\pong.$ternary$pong.v:134$76 ($mux).
Removed top 22 bits (of 32) from port Y of cell pong_game.$techmap\pong.$add$pong.v:131$73 ($add).
Removed top 22 bits (of 32) from port B of cell pong_game.$techmap\pong.$add$pong.v:131$73 ($add).
Removed top 22 bits (of 32) from mux cell pong_game.$techmap\pong.$ternary$pong.v:131$72 ($mux).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\pong.$eq$pong.v:63$59 ($eq).
Removed top 22 bits (of 32) from port B of cell pong_game.$techmap\pong.$eq$pong.v:62$53 ($eq).
Removed top 1 bits (of 10) from port B of cell pong_game.$techmap\pong.$eq$pong.v:60$44 ($eq).
Removed top 1 bits (of 10) from port B of cell pong_game.$techmap\pong.$eq$pong.v:60$43 ($eq).
Removed top 27 bits (of 32) from port B of cell pong_game.$techmap\pong.$add$pong.v:52$28 ($add).
Removed top 21 bits (of 32) from port Y of cell pong_game.$techmap\pong.$add$pong.v:52$28 ($add).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\pong.$lt$pong.v:51$26 ($lt).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\pong.$ge$pong.v:51$25 ($ge).
Removed top 27 bits (of 32) from port B of cell pong_game.$techmap\pong.$add$pong.v:51$24 ($add).
Removed top 21 bits (of 32) from port Y of cell pong_game.$techmap\pong.$add$pong.v:51$24 ($add).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\pong.$lt$pong.v:47$17 ($lt).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\pong.$ge$pong.v:47$15 ($ge).
Removed top 25 bits (of 32) from port B of cell pong_game.$techmap\pong.$add$pong.v:47$12 ($add).
Removed top 21 bits (of 32) from port Y of cell pong_game.$techmap\pong.$add$pong.v:47$12 ($add).
Removed top 1 bits (of 10) from port B of cell pong_game.$techmap\pong.$eq$pong.v:45$7 ($eq).
Removed top 1 bits (of 8) from port A of cell pong_game.$techmap\osd.$add$osd.v:99$174 ($add).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\osd.$add$osd.v:91$171 ($add).
Removed top 29 bits (of 32) from port Y of cell pong_game.$techmap\osd.$add$osd.v:91$171 ($add).
Removed top 1 bits (of 2) from port B of cell pong_game.$techmap\osd.$add$osd.v:85$168 ($add).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\osd.$add$osd.v:72$162 ($add).
Removed top 28 bits (of 32) from port Y of cell pong_game.$techmap\osd.$add$osd.v:72$162 ($add).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\osd.$lt$osd.v:54$155 ($lt).
Removed top 24 bits (of 32) from port B of cell pong_game.$techmap\osd.$le$osd.v:49$146 ($le).
Removed top 2 bits (of 10) from port B of cell pong_game.$techmap\osd.$ge$osd.v:49$145 ($ge).
Removed top 24 bits (of 32) from port B of cell pong_game.$techmap\osd.$lt$osd.v:40$142 ($lt).
Removed top 2 bits (of 10) from port B of cell pong_game.$techmap\osd.$ge$osd.v:40$141 ($ge).
Removed top 26 bits (of 32) from port B of cell pong_game.$techmap\osd.$lt$osd.v:39$139 ($lt).
Removed top 5 bits (of 10) from port B of cell pong_game.$techmap\osd.$ge$osd.v:39$138 ($ge).
Removed top 2 bits (of 10) from port B of cell pong_game.$techmap\osd.$eq$osd.v:35$134 ($eq).
Removed top 2 bits (of 10) from port B of cell pong_game.$techmap\osd.$eq$osd.v:34$132 ($eq).
Removed top 5 bits (of 10) from port B of cell pong_game.$techmap\osd.$eq$osd.v:34$131 ($eq).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\clock_generator.$add$clock_generator.v:65$206 ($add).
Removed top 13 bits (of 32) from port Y of cell pong_game.$techmap\clock_generator.$add$clock_generator.v:65$206 ($add).
Removed top 1 bits (of 10) from port B of cell pong_game.$techmap\vga.$lt$VGA_gen.v:103$106 ($lt).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\vga.$gt$VGA_gen.v:94$103 ($gt).
Removed top 23 bits (of 32) from port B of cell pong_game.$techmap\vga.$lt$VGA_gen.v:94$102 ($lt).
Removed top 22 bits (of 32) from port B of cell pong_game.$techmap\vga.$gt$VGA_gen.v:88$100 ($gt).
Removed top 22 bits (of 32) from port B of cell pong_game.$techmap\vga.$lt$VGA_gen.v:88$99 ($lt).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\vga.$add$VGA_gen.v:81$98 ($add).
Removed top 22 bits (of 32) from port Y of cell pong_game.$techmap\vga.$add$VGA_gen.v:81$98 ($add).
Removed top 22 bits (of 32) from port B of cell pong_game.$techmap\vga.$lt$VGA_gen.v:80$97 ($lt).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\vga.$add$VGA_gen.v:76$96 ($add).
Removed top 22 bits (of 32) from port Y of cell pong_game.$techmap\vga.$add$VGA_gen.v:76$96 ($add).
Removed top 22 bits (of 32) from port B of cell pong_game.$techmap\vga.$lt$VGA_gen.v:75$95 ($lt).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\vga.$add$VGA_gen.v:63$93 ($add).
Removed top 24 bits (of 32) from port Y of cell pong_game.$techmap\vga.$add$VGA_gen.v:63$93 ($add).
Removed top 24 bits (of 32) from port B of cell pong_game.$techmap\vga.$gt$VGA_gen.v:58$92 ($gt).
Removed top 1 bits (of 4) from port B of cell pong_game.$techmap\osd.score_register.$procmux$348_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell pong_game.$techmap\osd.score_register.$procmux$351_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell pong_game.$techmap\osd.score_register.$procmux$350_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell pong_game.$techmap\osd.score_register.$procmux$349_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell pong_game.$techmap\osd.score_register.$procmux$347_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell pong_game.$techmap\osd.score_register.$procmux$346_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell pong_game.$techmap\osd.score_register.$procmux$345_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell pong_game.$techmap\osd.score_register.$procmux$234 ($mux).
Removed top 27 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:52$202 ($le).
Removed top 28 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:51$201 ($le).
Removed top 28 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:50$200 ($le).
Removed top 28 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:49$199 ($le).
Removed top 28 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:48$198 ($le).
Removed top 29 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:47$197 ($le).
Removed top 29 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:46$196 ($le).
Removed top 30 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.$le$score_register.v:45$195 ($le).
Removed top 6 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$504_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell pong_game.$techmap\osd.osd_time_base.$eq$osd_time_base.v:26$184 ($eq).
Removed top 3 bits (of 4) from port B of cell pong_game.$techmap\osd.osd_time_base.$eq$osd_time_base.v:25$182 ($eq).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\osd.osd_time_base.$add$osd_time_base.v:22$181 ($add).
Removed top 28 bits (of 32) from port Y of cell pong_game.$techmap\osd.osd_time_base.$add$osd_time_base.v:22$181 ($add).
Removed top 1 bits (of 4) from port B of cell pong_game.$techmap\osd.osd_time_base.$eq$osd_time_base.v:21$180 ($eq).
Removed top 7 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$505_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$503_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$502_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$501_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$500_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$499_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$498_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$497_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$496_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$495_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$494_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$493_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$492_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$491_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$490_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$489_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$488_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$487_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$486_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$485_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$484_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$483_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$482_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$481_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$480_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$479_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$478_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$477_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$476_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$475_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$474_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$473_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$472_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$471_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$470_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$469_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$468_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$467_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$466_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$465_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$464_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$463_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$462_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$461_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$460_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$459_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$458_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$457_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$456_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$455_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$454_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$453_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$452_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$451_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$450_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$449_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$448_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$447_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$446_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$445_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$444_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$443_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$442_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$441_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$440_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$439_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$438_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$437_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$436_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$435_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$434_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$433_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$432_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$431_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$430_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$429_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$428_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$427_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$426_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$425_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$424_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$423_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$422_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$421_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$420_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$419_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$418_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$417_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$416_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$415_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$414_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$413_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$412_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$411_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$410_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$409_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$408_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$407_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$406_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$405_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$404_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell pong_game.$techmap\osd.character_memory.$procmux$403_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.bcd_8bit_counter.c0.$add$bcd_counter.v:21$208 ($add).
Removed top 28 bits (of 32) from port Y of cell pong_game.$techmap\osd.score_register.bcd_8bit_counter.c0.$add$bcd_counter.v:21$208 ($add).
Removed top 31 bits (of 32) from port B of cell pong_game.$techmap\osd.score_register.bcd_8bit_counter.c1.$add$bcd_counter.v:21$208 ($add).
Removed top 28 bits (of 32) from port Y of cell pong_game.$techmap\osd.score_register.bcd_8bit_counter.c1.$add$bcd_counter.v:21$208 ($add).
Removed top 13 bits (of 32) from wire pong_game.$techmap\clock_generator.$add$clock_generator.v:65$206_Y.
Removed top 28 bits (of 32) from wire pong_game.$techmap\osd.osd_time_base.$add$osd_time_base.v:22$181_Y.
Removed top 28 bits (of 32) from wire pong_game.$techmap\osd.score_register.bcd_8bit_counter.c0.$add$bcd_counter.v:21$208_Y.
Removed top 28 bits (of 32) from wire pong_game.$techmap\osd.score_register.bcd_8bit_counter.c1.$add$bcd_counter.v:21$208_Y.
Removed top 22 bits (of 32) from wire pong_game.$techmap\pong.$add$pong.v:131$73_Y.
Removed top 22 bits (of 32) from wire pong_game.$techmap\pong.$add$pong.v:134$77_Y.
Removed top 22 bits (of 32) from wire pong_game.$techmap\pong.$add$pong.v:149$82_Y.
Removed top 21 bits (of 32) from wire pong_game.$techmap\pong.$add$pong.v:47$12_Y.
Removed top 21 bits (of 32) from wire pong_game.$techmap\pong.$add$pong.v:51$24_Y.
Removed top 21 bits (of 32) from wire pong_game.$techmap\pong.$add$pong.v:52$28_Y.
Removed top 22 bits (of 32) from wire pong_game.$techmap\pong.$sub$pong.v:152$84_Y.
Removed top 28 bits (of 32) from wire pong_game.$techmap\rst_gen.$add$reset_gen.v:22$214_Y.
Removed top 24 bits (of 32) from wire pong_game.$techmap\vga.$add$VGA_gen.v:63$93_Y.
Removed top 22 bits (of 32) from wire pong_game.$techmap\vga.$add$VGA_gen.v:76$96_Y.
Removed top 22 bits (of 32) from wire pong_game.$techmap\vga.$add$VGA_gen.v:81$98_Y.
Removed top 6 bits (of 8) from wire pong_game.events.
Removed top 1 bits (of 8) from wire pong_game.osd.char_mem_address.
Removed top 6 bits (of 8) from wire pong_game.osd.events.
Removed top 6 bits (of 8) from wire pong_game.pong.events.

14.12. Executing PEEPOPT pass (run peephole optimizers).

14.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

14.14. Executing SHARE pass (SAT-based resource sharing).

14.15. Executing TECHMAP pass (map to technology primitives).

14.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

14.15.2. Continuing TECHMAP pass.
Using template $paramod$414f1986ada85c656f6d6858201019c60e449e6c\_90_lut_cmp_ for cells of type $ne.
Using template $paramod$99e5b0ecd4c7f9fb6cd3a733593eba894c42613f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$64fdb727b8fb55a4fe9731fe5b6468d06ea5e6e3\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~3352 debug messages>

14.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 0 unused cells and 48 unused wires.
<suppressed ~1 debug messages>

14.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pong_game:
  creating $macc model for $techmap\button_left.$add$button.v:24$120 ($add).
  creating $macc model for $techmap\button_left.$add$button.v:28$122 ($add).
  creating $macc model for $techmap\button_right.$add$button.v:24$120 ($add).
  creating $macc model for $techmap\button_right.$add$button.v:28$122 ($add).
  creating $macc model for $techmap\clock_generator.$add$clock_generator.v:65$206 ($add).
  creating $macc model for $techmap\osd.$add$osd.v:72$162 ($add).
  creating $macc model for $techmap\osd.$add$osd.v:85$168 ($add).
  creating $macc model for $techmap\osd.$add$osd.v:91$171 ($add).
  creating $macc model for $techmap\osd.$add$osd.v:99$174 ($add).
  creating $macc model for $techmap\osd.osd_time_base.$add$osd_time_base.v:22$181 ($add).
  creating $macc model for $techmap\osd.score_register.bcd_8bit_counter.c0.$add$bcd_counter.v:21$208 ($add).
  creating $macc model for $techmap\osd.score_register.bcd_8bit_counter.c1.$add$bcd_counter.v:21$208 ($add).
  creating $macc model for $techmap\pong.$add$pong.v:131$73 ($add).
  creating $macc model for $techmap\pong.$add$pong.v:134$77 ($add).
  creating $macc model for $techmap\pong.$add$pong.v:149$82 ($add).
  creating $macc model for $techmap\pong.$add$pong.v:47$12 ($add).
  creating $macc model for $techmap\pong.$add$pong.v:51$24 ($add).
  creating $macc model for $techmap\pong.$add$pong.v:52$28 ($add).
  creating $macc model for $techmap\pong.$sub$pong.v:152$84 ($sub).
  creating $macc model for $techmap\rst_gen.$add$reset_gen.v:22$214 ($add).
  creating $macc model for $techmap\vga.$add$VGA_gen.v:63$93 ($add).
  creating $macc model for $techmap\vga.$add$VGA_gen.v:76$96 ($add).
  creating $macc model for $techmap\vga.$add$VGA_gen.v:81$98 ($add).
  creating $alu model for $macc $techmap\vga.$add$VGA_gen.v:81$98.
  creating $alu model for $macc $techmap\vga.$add$VGA_gen.v:76$96.
  creating $alu model for $macc $techmap\vga.$add$VGA_gen.v:63$93.
  creating $alu model for $macc $techmap\rst_gen.$add$reset_gen.v:22$214.
  creating $alu model for $macc $techmap\pong.$sub$pong.v:152$84.
  creating $alu model for $macc $techmap\pong.$add$pong.v:52$28.
  creating $alu model for $macc $techmap\pong.$add$pong.v:51$24.
  creating $alu model for $macc $techmap\pong.$add$pong.v:47$12.
  creating $alu model for $macc $techmap\pong.$add$pong.v:149$82.
  creating $alu model for $macc $techmap\pong.$add$pong.v:134$77.
  creating $alu model for $macc $techmap\pong.$add$pong.v:131$73.
  creating $alu model for $macc $techmap\osd.score_register.bcd_8bit_counter.c1.$add$bcd_counter.v:21$208.
  creating $alu model for $macc $techmap\osd.score_register.bcd_8bit_counter.c0.$add$bcd_counter.v:21$208.
  creating $alu model for $macc $techmap\osd.osd_time_base.$add$osd_time_base.v:22$181.
  creating $alu model for $macc $techmap\osd.$add$osd.v:99$174.
  creating $alu model for $macc $techmap\osd.$add$osd.v:91$171.
  creating $alu model for $macc $techmap\osd.$add$osd.v:85$168.
  creating $alu model for $macc $techmap\osd.$add$osd.v:72$162.
  creating $alu model for $macc $techmap\clock_generator.$add$clock_generator.v:65$206.
  creating $alu model for $macc $techmap\button_right.$add$button.v:28$122.
  creating $alu model for $macc $techmap\button_right.$add$button.v:24$120.
  creating $alu model for $macc $techmap\button_left.$add$button.v:28$122.
  creating $alu model for $macc $techmap\button_left.$add$button.v:24$120.
  creating $alu model for $techmap\osd.$ge$osd.v:39$138 ($ge): new $alu
  creating $alu model for $techmap\osd.$ge$osd.v:40$141 ($ge): new $alu
  creating $alu model for $techmap\osd.$ge$osd.v:49$145 ($ge): new $alu
  creating $alu model for $techmap\osd.$le$osd.v:49$146 ($le): new $alu
  creating $alu model for $techmap\osd.$lt$osd.v:39$139 ($lt): new $alu
  creating $alu model for $techmap\osd.$lt$osd.v:40$142 ($lt): new $alu
  creating $alu model for $techmap\osd.$lt$osd.v:54$155 ($lt): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:45$195 ($le): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:46$196 ($le): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:47$197 ($le): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:48$198 ($le): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:49$199 ($le): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:50$200 ($le): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:51$201 ($le): new $alu
  creating $alu model for $techmap\osd.score_register.$le$score_register.v:52$202 ($le): new $alu
  creating $alu model for $techmap\pong.$ge$pong.v:47$11 ($ge): new $alu
  creating $alu model for $techmap\pong.$ge$pong.v:47$15 ($ge): new $alu
  creating $alu model for $techmap\pong.$ge$pong.v:51$25 ($ge): new $alu
  creating $alu model for $techmap\pong.$ge$pong.v:52$29 ($ge): new $alu
  creating $alu model for $techmap\pong.$ge$pong.v:56$33 ($ge): new $alu
  creating $alu model for $techmap\pong.$ge$pong.v:56$37 ($ge): new $alu
  creating $alu model for $techmap\pong.$lt$pong.v:47$13 ($lt): new $alu
  creating $alu model for $techmap\pong.$lt$pong.v:47$17 ($lt): new $alu
  creating $alu model for $techmap\pong.$lt$pong.v:51$26 ($lt): new $alu
  creating $alu model for $techmap\pong.$lt$pong.v:52$31 ($lt): new $alu
  creating $alu model for $techmap\pong.$lt$pong.v:56$35 ($lt): new $alu
  creating $alu model for $techmap\pong.$lt$pong.v:56$40 ($lt): new $alu
  creating $alu model for $techmap\vga.$gt$VGA_gen.v:58$92 ($gt): new $alu
  creating $alu model for $techmap\vga.$gt$VGA_gen.v:88$100 ($gt): new $alu
  creating $alu model for $techmap\vga.$gt$VGA_gen.v:94$103 ($gt): new $alu
  creating $alu model for $techmap\vga.$lt$VGA_gen.v:100$105 ($lt): new $alu
  creating $alu model for $techmap\vga.$lt$VGA_gen.v:103$106 ($lt): new $alu
  creating $alu model for $techmap\vga.$lt$VGA_gen.v:75$95 ($lt): new $alu
  creating $alu model for $techmap\vga.$lt$VGA_gen.v:80$97 ($lt): new $alu
  creating $alu model for $techmap\vga.$lt$VGA_gen.v:88$99 ($lt): new $alu
  creating $alu model for $techmap\vga.$lt$VGA_gen.v:94$102 ($lt): new $alu
  creating $alu model for $techmap\osd.$eq$osd.v:34$131 ($eq): merged with $techmap\osd.$ge$osd.v:39$138.
  creating $alu model for $techmap\osd.$eq$osd.v:34$132 ($eq): merged with $techmap\osd.$ge$osd.v:49$145.
  creating $alu model for $techmap\osd.$eq$osd.v:35$134 ($eq): merged with $techmap\osd.$ge$osd.v:40$141.
  creating $alu model for $techmap\pong.$eq$pong.v:60$44 ($eq): merged with $techmap\pong.$lt$pong.v:51$26.
  creating $alu cell for $techmap\vga.$lt$VGA_gen.v:94$102: $auto$alumacc.cc:474:replace_alu$785
  creating $alu cell for $techmap\vga.$lt$VGA_gen.v:88$99: $auto$alumacc.cc:474:replace_alu$796
  creating $alu cell for $techmap\vga.$lt$VGA_gen.v:80$97: $auto$alumacc.cc:474:replace_alu$801
  creating $alu cell for $techmap\vga.$lt$VGA_gen.v:75$95: $auto$alumacc.cc:474:replace_alu$806
  creating $alu cell for $techmap\vga.$lt$VGA_gen.v:103$106: $auto$alumacc.cc:474:replace_alu$817
  creating $alu cell for $techmap\vga.$lt$VGA_gen.v:100$105: $auto$alumacc.cc:474:replace_alu$828
  creating $alu cell for $techmap\vga.$gt$VGA_gen.v:94$103: $auto$alumacc.cc:474:replace_alu$833
  creating $alu cell for $techmap\vga.$gt$VGA_gen.v:88$100: $auto$alumacc.cc:474:replace_alu$838
  creating $alu cell for $techmap\vga.$gt$VGA_gen.v:58$92: $auto$alumacc.cc:474:replace_alu$849
  creating $alu cell for $techmap\pong.$lt$pong.v:56$40: $auto$alumacc.cc:474:replace_alu$860
  creating $alu cell for $techmap\pong.$lt$pong.v:56$35: $auto$alumacc.cc:474:replace_alu$865
  creating $alu cell for $techmap\pong.$lt$pong.v:52$31: $auto$alumacc.cc:474:replace_alu$870
  creating $alu cell for $techmap\pong.$lt$pong.v:51$26, $techmap\pong.$eq$pong.v:60$44: $auto$alumacc.cc:474:replace_alu$875
  creating $alu cell for $techmap\pong.$lt$pong.v:47$17: $auto$alumacc.cc:474:replace_alu$886
  creating $alu cell for $techmap\pong.$lt$pong.v:47$13: $auto$alumacc.cc:474:replace_alu$897
  creating $alu cell for $techmap\pong.$ge$pong.v:56$37: $auto$alumacc.cc:474:replace_alu$902
  creating $alu cell for $techmap\pong.$ge$pong.v:56$33: $auto$alumacc.cc:474:replace_alu$911
  creating $alu cell for $techmap\pong.$ge$pong.v:52$29: $auto$alumacc.cc:474:replace_alu$920
  creating $alu cell for $techmap\pong.$ge$pong.v:51$25: $auto$alumacc.cc:474:replace_alu$929
  creating $alu cell for $techmap\pong.$ge$pong.v:47$15: $auto$alumacc.cc:474:replace_alu$938
  creating $alu cell for $techmap\pong.$ge$pong.v:47$11: $auto$alumacc.cc:474:replace_alu$947
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:52$202: $auto$alumacc.cc:474:replace_alu$956
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:51$201: $auto$alumacc.cc:474:replace_alu$969
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:50$200: $auto$alumacc.cc:474:replace_alu$982
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:49$199: $auto$alumacc.cc:474:replace_alu$995
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:48$198: $auto$alumacc.cc:474:replace_alu$1008
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:47$197: $auto$alumacc.cc:474:replace_alu$1021
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:46$196: $auto$alumacc.cc:474:replace_alu$1034
  creating $alu cell for $techmap\osd.score_register.$le$score_register.v:45$195: $auto$alumacc.cc:474:replace_alu$1047
  creating $alu cell for $techmap\osd.$lt$osd.v:54$155: $auto$alumacc.cc:474:replace_alu$1060
  creating $alu cell for $techmap\osd.$lt$osd.v:40$142: $auto$alumacc.cc:474:replace_alu$1071
  creating $alu cell for $techmap\osd.$lt$osd.v:39$139: $auto$alumacc.cc:474:replace_alu$1082
  creating $alu cell for $techmap\osd.$le$osd.v:49$146: $auto$alumacc.cc:474:replace_alu$1093
  creating $alu cell for $techmap\osd.$ge$osd.v:49$145, $techmap\osd.$eq$osd.v:34$132: $auto$alumacc.cc:474:replace_alu$1106
  creating $alu cell for $techmap\osd.$ge$osd.v:40$141, $techmap\osd.$eq$osd.v:35$134: $auto$alumacc.cc:474:replace_alu$1115
  creating $alu cell for $techmap\osd.$ge$osd.v:39$138, $techmap\osd.$eq$osd.v:34$131: $auto$alumacc.cc:474:replace_alu$1124
  creating $alu cell for $techmap\button_left.$add$button.v:24$120: $auto$alumacc.cc:474:replace_alu$1133
  creating $alu cell for $techmap\button_left.$add$button.v:28$122: $auto$alumacc.cc:474:replace_alu$1136
  creating $alu cell for $techmap\button_right.$add$button.v:24$120: $auto$alumacc.cc:474:replace_alu$1139
  creating $alu cell for $techmap\button_right.$add$button.v:28$122: $auto$alumacc.cc:474:replace_alu$1142
  creating $alu cell for $techmap\clock_generator.$add$clock_generator.v:65$206: $auto$alumacc.cc:474:replace_alu$1145
  creating $alu cell for $techmap\osd.$add$osd.v:72$162: $auto$alumacc.cc:474:replace_alu$1148
  creating $alu cell for $techmap\osd.$add$osd.v:85$168: $auto$alumacc.cc:474:replace_alu$1151
  creating $alu cell for $techmap\osd.$add$osd.v:91$171: $auto$alumacc.cc:474:replace_alu$1154
  creating $alu cell for $techmap\osd.$add$osd.v:99$174: $auto$alumacc.cc:474:replace_alu$1157
  creating $alu cell for $techmap\osd.osd_time_base.$add$osd_time_base.v:22$181: $auto$alumacc.cc:474:replace_alu$1160
  creating $alu cell for $techmap\osd.score_register.bcd_8bit_counter.c0.$add$bcd_counter.v:21$208: $auto$alumacc.cc:474:replace_alu$1163
  creating $alu cell for $techmap\osd.score_register.bcd_8bit_counter.c1.$add$bcd_counter.v:21$208: $auto$alumacc.cc:474:replace_alu$1166
  creating $alu cell for $techmap\pong.$add$pong.v:131$73: $auto$alumacc.cc:474:replace_alu$1169
  creating $alu cell for $techmap\pong.$add$pong.v:134$77: $auto$alumacc.cc:474:replace_alu$1172
  creating $alu cell for $techmap\pong.$add$pong.v:149$82: $auto$alumacc.cc:474:replace_alu$1175
  creating $alu cell for $techmap\pong.$add$pong.v:47$12: $auto$alumacc.cc:474:replace_alu$1178
  creating $alu cell for $techmap\pong.$add$pong.v:51$24: $auto$alumacc.cc:474:replace_alu$1181
  creating $alu cell for $techmap\pong.$add$pong.v:52$28: $auto$alumacc.cc:474:replace_alu$1184
  creating $alu cell for $techmap\pong.$sub$pong.v:152$84: $auto$alumacc.cc:474:replace_alu$1187
  creating $alu cell for $techmap\rst_gen.$add$reset_gen.v:22$214: $auto$alumacc.cc:474:replace_alu$1190
  creating $alu cell for $techmap\vga.$add$VGA_gen.v:63$93: $auto$alumacc.cc:474:replace_alu$1193
  creating $alu cell for $techmap\vga.$add$VGA_gen.v:76$96: $auto$alumacc.cc:474:replace_alu$1196
  creating $alu cell for $techmap\vga.$add$VGA_gen.v:81$98: $auto$alumacc.cc:474:replace_alu$1199
  created 59 $alu and 0 $macc cells.

14.19. Executing OPT pass (performing simple optimizations).

14.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~7 debug messages>

14.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pong_game..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

14.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pong_game.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$909: { $auto$rtlil.cc:1832:Not$906 $auto$rtlil.cc:1835:ReduceAnd$908 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$918: { $auto$rtlil.cc:1832:Not$915 $auto$rtlil.cc:1835:ReduceAnd$917 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$927: { $auto$rtlil.cc:1832:Not$924 $auto$rtlil.cc:1835:ReduceAnd$926 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$936: { $auto$rtlil.cc:1832:Not$933 $auto$rtlil.cc:1835:ReduceAnd$935 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$945: { $auto$rtlil.cc:1832:Not$942 $auto$rtlil.cc:1835:ReduceAnd$944 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$954: { $auto$rtlil.cc:1832:Not$951 $auto$rtlil.cc:1835:ReduceAnd$953 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$980: { $auto$rtlil.cc:1832:Not$979 $auto$rtlil.cc:1835:ReduceAnd$973 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$993: { $auto$rtlil.cc:1832:Not$992 $auto$rtlil.cc:1835:ReduceAnd$986 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1019: { $auto$rtlil.cc:1832:Not$1018 $auto$rtlil.cc:1835:ReduceAnd$1012 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1032: { $auto$rtlil.cc:1832:Not$1031 $auto$rtlil.cc:1835:ReduceAnd$1025 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1045: { $auto$rtlil.cc:1832:Not$1044 $auto$rtlil.cc:1835:ReduceAnd$1038 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1058: { $auto$rtlil.cc:1832:Not$1057 $auto$rtlil.cc:1835:ReduceAnd$1051 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1104: { $auto$rtlil.cc:1832:Not$1103 $auto$rtlil.cc:1835:ReduceAnd$1097 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1113: { $auto$rtlil.cc:1832:Not$1110 $auto$rtlil.cc:1835:ReduceAnd$1112 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1120: { $auto$alumacc.cc:490:replace_alu$1116 [0] $auto$alumacc.cc:490:replace_alu$1116 [1] $auto$alumacc.cc:490:replace_alu$1116 [2] $auto$alumacc.cc:490:replace_alu$1116 [3] $auto$alumacc.cc:490:replace_alu$1116 [4] $auto$alumacc.cc:490:replace_alu$1116 [5] $auto$alumacc.cc:490:replace_alu$1116 [6] $auto$alumacc.cc:490:replace_alu$1116 [7] $auto$alumacc.cc:490:replace_alu$1116 [8] $auto$alumacc.cc:490:replace_alu$1116 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1111: { $auto$alumacc.cc:490:replace_alu$1107 [0] $auto$alumacc.cc:490:replace_alu$1107 [1] $auto$alumacc.cc:490:replace_alu$1107 [2] $auto$alumacc.cc:490:replace_alu$1107 [3] $auto$alumacc.cc:490:replace_alu$1107 [4] $auto$alumacc.cc:490:replace_alu$1107 [5] $auto$alumacc.cc:490:replace_alu$1107 [6] $auto$alumacc.cc:490:replace_alu$1107 [7] $auto$alumacc.cc:490:replace_alu$1107 [8] $auto$alumacc.cc:490:replace_alu$1107 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1129: { $auto$alumacc.cc:490:replace_alu$1125 [0] $auto$alumacc.cc:490:replace_alu$1125 [1] $auto$alumacc.cc:490:replace_alu$1125 [2] $auto$alumacc.cc:490:replace_alu$1125 [3] $auto$alumacc.cc:490:replace_alu$1125 [4] $auto$alumacc.cc:490:replace_alu$1125 [5] $auto$alumacc.cc:490:replace_alu$1125 [6] $auto$alumacc.cc:490:replace_alu$1125 [7] $auto$alumacc.cc:490:replace_alu$1125 [8] $auto$alumacc.cc:490:replace_alu$1125 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$788: { $auto$alumacc.cc:490:replace_alu$786 [0] $auto$alumacc.cc:490:replace_alu$786 [1] $auto$alumacc.cc:490:replace_alu$786 [2] $auto$alumacc.cc:490:replace_alu$786 [3] $auto$alumacc.cc:490:replace_alu$786 [4] $auto$alumacc.cc:490:replace_alu$786 [5] $auto$alumacc.cc:490:replace_alu$786 [6] $auto$alumacc.cc:490:replace_alu$786 [7] $auto$alumacc.cc:490:replace_alu$786 [8] $auto$alumacc.cc:490:replace_alu$786 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$809: { $auto$alumacc.cc:490:replace_alu$807 [0] $auto$alumacc.cc:490:replace_alu$807 [1] $auto$alumacc.cc:490:replace_alu$807 [2] $auto$alumacc.cc:490:replace_alu$807 [3] $auto$alumacc.cc:490:replace_alu$807 [4] $auto$alumacc.cc:490:replace_alu$807 [5] $auto$alumacc.cc:490:replace_alu$807 [6] $auto$alumacc.cc:490:replace_alu$807 [7] $auto$alumacc.cc:490:replace_alu$807 [8] $auto$alumacc.cc:490:replace_alu$807 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$820: { $auto$alumacc.cc:490:replace_alu$818 [0] $auto$alumacc.cc:490:replace_alu$818 [1] $auto$alumacc.cc:490:replace_alu$818 [2] $auto$alumacc.cc:490:replace_alu$818 [3] $auto$alumacc.cc:490:replace_alu$818 [4] $auto$alumacc.cc:490:replace_alu$818 [5] $auto$alumacc.cc:490:replace_alu$818 [6] $auto$alumacc.cc:490:replace_alu$818 [7] $auto$alumacc.cc:490:replace_alu$818 [8] $auto$alumacc.cc:490:replace_alu$818 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$841: { $auto$alumacc.cc:490:replace_alu$839 [0] $auto$alumacc.cc:490:replace_alu$839 [1] $auto$alumacc.cc:490:replace_alu$839 [2] $auto$alumacc.cc:490:replace_alu$839 [3] $auto$alumacc.cc:490:replace_alu$839 [4] $auto$alumacc.cc:490:replace_alu$839 [5] $auto$alumacc.cc:490:replace_alu$839 [6] $auto$alumacc.cc:490:replace_alu$839 [7] $auto$alumacc.cc:490:replace_alu$839 [8] $auto$alumacc.cc:490:replace_alu$839 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$852: { $auto$alumacc.cc:490:replace_alu$850 [0] $auto$alumacc.cc:490:replace_alu$850 [1] $auto$alumacc.cc:490:replace_alu$850 [2] $auto$alumacc.cc:490:replace_alu$850 [3] $auto$alumacc.cc:490:replace_alu$850 [4] $auto$alumacc.cc:490:replace_alu$850 [5] $auto$alumacc.cc:490:replace_alu$850 [6] $auto$alumacc.cc:490:replace_alu$850 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$878: { $auto$alumacc.cc:490:replace_alu$876 [0] $auto$alumacc.cc:490:replace_alu$876 [1] $auto$alumacc.cc:490:replace_alu$876 [2] $auto$alumacc.cc:490:replace_alu$876 [3] $auto$alumacc.cc:490:replace_alu$876 [4] $auto$alumacc.cc:490:replace_alu$876 [5] $auto$alumacc.cc:490:replace_alu$876 [6] $auto$alumacc.cc:490:replace_alu$876 [7] $auto$alumacc.cc:490:replace_alu$876 [8] $auto$alumacc.cc:490:replace_alu$876 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$889: { $auto$alumacc.cc:490:replace_alu$887 [0] $auto$alumacc.cc:490:replace_alu$887 [1] $auto$alumacc.cc:490:replace_alu$887 [2] $auto$alumacc.cc:490:replace_alu$887 [3] $auto$alumacc.cc:490:replace_alu$887 [4] $auto$alumacc.cc:490:replace_alu$887 [5] $auto$alumacc.cc:490:replace_alu$887 [6] $auto$alumacc.cc:490:replace_alu$887 [7] $auto$alumacc.cc:490:replace_alu$887 [8] $auto$alumacc.cc:490:replace_alu$887 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$907: { $auto$alumacc.cc:490:replace_alu$903 [0] $auto$alumacc.cc:490:replace_alu$903 [1] $auto$alumacc.cc:490:replace_alu$903 [2] $auto$alumacc.cc:490:replace_alu$903 [3] $auto$alumacc.cc:490:replace_alu$903 [4] $auto$alumacc.cc:490:replace_alu$903 [5] $auto$alumacc.cc:490:replace_alu$903 [6] $auto$alumacc.cc:490:replace_alu$903 [7] $auto$alumacc.cc:490:replace_alu$903 [8] $auto$alumacc.cc:490:replace_alu$903 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$916: { $auto$alumacc.cc:490:replace_alu$912 [0] $auto$alumacc.cc:490:replace_alu$912 [1] $auto$alumacc.cc:490:replace_alu$912 [2] $auto$alumacc.cc:490:replace_alu$912 [3] $auto$alumacc.cc:490:replace_alu$912 [4] $auto$alumacc.cc:490:replace_alu$912 [5] $auto$alumacc.cc:490:replace_alu$912 [6] $auto$alumacc.cc:490:replace_alu$912 [7] $auto$alumacc.cc:490:replace_alu$912 [8] $auto$alumacc.cc:490:replace_alu$912 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$925: { $auto$alumacc.cc:490:replace_alu$921 [0] $auto$alumacc.cc:490:replace_alu$921 [1] $auto$alumacc.cc:490:replace_alu$921 [2] $auto$alumacc.cc:490:replace_alu$921 [3] $auto$alumacc.cc:490:replace_alu$921 [4] $auto$alumacc.cc:490:replace_alu$921 [5] $auto$alumacc.cc:490:replace_alu$921 [6] $auto$alumacc.cc:490:replace_alu$921 [7] $auto$alumacc.cc:490:replace_alu$921 [8] $auto$alumacc.cc:490:replace_alu$921 [9] $auto$alumacc.cc:490:replace_alu$921 [10] $auto$alumacc.cc:490:replace_alu$921 [11] $auto$alumacc.cc:490:replace_alu$921 [12] $auto$alumacc.cc:490:replace_alu$921 [13] $auto$alumacc.cc:490:replace_alu$921 [14] $auto$alumacc.cc:490:replace_alu$921 [15] $auto$alumacc.cc:490:replace_alu$921 [16] $auto$alumacc.cc:490:replace_alu$921 [17] $auto$alumacc.cc:490:replace_alu$921 [18] $auto$alumacc.cc:490:replace_alu$921 [19] $auto$alumacc.cc:490:replace_alu$921 [20] $auto$alumacc.cc:490:replace_alu$921 [21] $auto$alumacc.cc:490:replace_alu$921 [22] $auto$alumacc.cc:490:replace_alu$921 [23] $auto$alumacc.cc:490:replace_alu$921 [24] $auto$alumacc.cc:490:replace_alu$921 [25] $auto$alumacc.cc:490:replace_alu$921 [26] $auto$alumacc.cc:490:replace_alu$921 [27] $auto$alumacc.cc:490:replace_alu$921 [28] $auto$alumacc.cc:490:replace_alu$921 [29] $auto$alumacc.cc:490:replace_alu$921 [30] $auto$alumacc.cc:490:replace_alu$921 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$934: { $auto$alumacc.cc:490:replace_alu$930 [0] $auto$alumacc.cc:490:replace_alu$930 [1] $auto$alumacc.cc:490:replace_alu$930 [2] $auto$alumacc.cc:490:replace_alu$930 [3] $auto$alumacc.cc:490:replace_alu$930 [4] $auto$alumacc.cc:490:replace_alu$930 [5] $auto$alumacc.cc:490:replace_alu$930 [6] $auto$alumacc.cc:490:replace_alu$930 [7] $auto$alumacc.cc:490:replace_alu$930 [8] $auto$alumacc.cc:490:replace_alu$930 [9] $auto$alumacc.cc:490:replace_alu$930 [10] $auto$alumacc.cc:490:replace_alu$930 [11] $auto$alumacc.cc:490:replace_alu$930 [12] $auto$alumacc.cc:490:replace_alu$930 [13] $auto$alumacc.cc:490:replace_alu$930 [14] $auto$alumacc.cc:490:replace_alu$930 [15] $auto$alumacc.cc:490:replace_alu$930 [16] $auto$alumacc.cc:490:replace_alu$930 [17] $auto$alumacc.cc:490:replace_alu$930 [18] $auto$alumacc.cc:490:replace_alu$930 [19] $auto$alumacc.cc:490:replace_alu$930 [20] $auto$alumacc.cc:490:replace_alu$930 [21] $auto$alumacc.cc:490:replace_alu$930 [22] $auto$alumacc.cc:490:replace_alu$930 [23] $auto$alumacc.cc:490:replace_alu$930 [24] $auto$alumacc.cc:490:replace_alu$930 [25] $auto$alumacc.cc:490:replace_alu$930 [26] $auto$alumacc.cc:490:replace_alu$930 [27] $auto$alumacc.cc:490:replace_alu$930 [28] $auto$alumacc.cc:490:replace_alu$930 [29] $auto$alumacc.cc:490:replace_alu$930 [30] $auto$alumacc.cc:490:replace_alu$930 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$943: { $auto$alumacc.cc:490:replace_alu$939 [0] $auto$alumacc.cc:490:replace_alu$939 [1] $auto$alumacc.cc:490:replace_alu$939 [2] $auto$alumacc.cc:490:replace_alu$939 [3] $auto$alumacc.cc:490:replace_alu$939 [4] $auto$alumacc.cc:490:replace_alu$939 [5] $auto$alumacc.cc:490:replace_alu$939 [6] $auto$alumacc.cc:490:replace_alu$939 [7] $auto$alumacc.cc:490:replace_alu$939 [8] $auto$alumacc.cc:490:replace_alu$939 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$952: { $auto$alumacc.cc:490:replace_alu$948 [0] $auto$alumacc.cc:490:replace_alu$948 [1] $auto$alumacc.cc:490:replace_alu$948 [2] $auto$alumacc.cc:490:replace_alu$948 [3] $auto$alumacc.cc:490:replace_alu$948 [4] $auto$alumacc.cc:490:replace_alu$948 [5] $auto$alumacc.cc:490:replace_alu$948 [6] $auto$alumacc.cc:490:replace_alu$948 [7] $auto$alumacc.cc:490:replace_alu$948 [8] $auto$alumacc.cc:490:replace_alu$948 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$959: { $auto$alumacc.cc:490:replace_alu$957 [0] $auto$alumacc.cc:490:replace_alu$957 [1] $auto$alumacc.cc:490:replace_alu$957 [2] $auto$alumacc.cc:490:replace_alu$957 [3] $auto$alumacc.cc:490:replace_alu$957 [4] $auto$alumacc.cc:490:replace_alu$957 [5] $auto$alumacc.cc:490:replace_alu$957 [6] $auto$alumacc.cc:490:replace_alu$957 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$972: { $auto$alumacc.cc:490:replace_alu$970 [0] $auto$alumacc.cc:490:replace_alu$970 [1] $auto$alumacc.cc:490:replace_alu$970 [2] $auto$alumacc.cc:490:replace_alu$970 [3] $auto$alumacc.cc:490:replace_alu$970 [4] $auto$alumacc.cc:490:replace_alu$970 [5] $auto$alumacc.cc:490:replace_alu$970 [6] $auto$alumacc.cc:490:replace_alu$970 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$985: { $auto$alumacc.cc:490:replace_alu$983 [0] $auto$alumacc.cc:490:replace_alu$983 [1] $auto$alumacc.cc:490:replace_alu$983 [2] $auto$alumacc.cc:490:replace_alu$983 [3] $auto$alumacc.cc:490:replace_alu$983 [4] $auto$alumacc.cc:490:replace_alu$983 [5] $auto$alumacc.cc:490:replace_alu$983 [6] $auto$alumacc.cc:490:replace_alu$983 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$998: { $auto$alumacc.cc:490:replace_alu$996 [0] $auto$alumacc.cc:490:replace_alu$996 [1] $auto$alumacc.cc:490:replace_alu$996 [2] $auto$alumacc.cc:490:replace_alu$996 [3] $auto$alumacc.cc:490:replace_alu$996 [4] $auto$alumacc.cc:490:replace_alu$996 [5] $auto$alumacc.cc:490:replace_alu$996 [6] $auto$alumacc.cc:490:replace_alu$996 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1011: { $auto$alumacc.cc:490:replace_alu$1009 [0] $auto$alumacc.cc:490:replace_alu$1009 [1] $auto$alumacc.cc:490:replace_alu$1009 [2] $auto$alumacc.cc:490:replace_alu$1009 [3] $auto$alumacc.cc:490:replace_alu$1009 [4] $auto$alumacc.cc:490:replace_alu$1009 [5] $auto$alumacc.cc:490:replace_alu$1009 [6] $auto$alumacc.cc:490:replace_alu$1009 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1024: { $auto$alumacc.cc:490:replace_alu$1022 [0] $auto$alumacc.cc:490:replace_alu$1022 [1] $auto$alumacc.cc:490:replace_alu$1022 [2] $auto$alumacc.cc:490:replace_alu$1022 [3] $auto$alumacc.cc:490:replace_alu$1022 [4] $auto$alumacc.cc:490:replace_alu$1022 [5] $auto$alumacc.cc:490:replace_alu$1022 [6] $auto$alumacc.cc:490:replace_alu$1022 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1037: { $auto$alumacc.cc:490:replace_alu$1035 [0] $auto$alumacc.cc:490:replace_alu$1035 [1] $auto$alumacc.cc:490:replace_alu$1035 [2] $auto$alumacc.cc:490:replace_alu$1035 [3] $auto$alumacc.cc:490:replace_alu$1035 [4] $auto$alumacc.cc:490:replace_alu$1035 [5] $auto$alumacc.cc:490:replace_alu$1035 [6] $auto$alumacc.cc:490:replace_alu$1035 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1050: { $auto$alumacc.cc:490:replace_alu$1048 [0] $auto$alumacc.cc:490:replace_alu$1048 [1] $auto$alumacc.cc:490:replace_alu$1048 [2] $auto$alumacc.cc:490:replace_alu$1048 [3] $auto$alumacc.cc:490:replace_alu$1048 [4] $auto$alumacc.cc:490:replace_alu$1048 [5] $auto$alumacc.cc:490:replace_alu$1048 [6] $auto$alumacc.cc:490:replace_alu$1048 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1063: { $auto$alumacc.cc:490:replace_alu$1061 [0] $auto$alumacc.cc:490:replace_alu$1061 [1] $auto$alumacc.cc:490:replace_alu$1061 [2] $auto$alumacc.cc:490:replace_alu$1061 [3] $auto$alumacc.cc:490:replace_alu$1061 [4] $auto$alumacc.cc:490:replace_alu$1061 [5] $auto$alumacc.cc:490:replace_alu$1061 [6] $auto$alumacc.cc:490:replace_alu$1061 [7] $auto$alumacc.cc:490:replace_alu$1061 [8] $auto$alumacc.cc:490:replace_alu$1061 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1074: { $auto$alumacc.cc:490:replace_alu$1072 [0] $auto$alumacc.cc:490:replace_alu$1072 [1] $auto$alumacc.cc:490:replace_alu$1072 [2] $auto$alumacc.cc:490:replace_alu$1072 [3] $auto$alumacc.cc:490:replace_alu$1072 [4] $auto$alumacc.cc:490:replace_alu$1072 [5] $auto$alumacc.cc:490:replace_alu$1072 [6] $auto$alumacc.cc:490:replace_alu$1072 [7] $auto$alumacc.cc:490:replace_alu$1072 [8] $auto$alumacc.cc:490:replace_alu$1072 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1085: { $auto$alumacc.cc:490:replace_alu$1083 [0] $auto$alumacc.cc:490:replace_alu$1083 [1] $auto$alumacc.cc:490:replace_alu$1083 [2] $auto$alumacc.cc:490:replace_alu$1083 [3] $auto$alumacc.cc:490:replace_alu$1083 [4] $auto$alumacc.cc:490:replace_alu$1083 [5] $auto$alumacc.cc:490:replace_alu$1083 [6] $auto$alumacc.cc:490:replace_alu$1083 [7] $auto$alumacc.cc:490:replace_alu$1083 [8] $auto$alumacc.cc:490:replace_alu$1083 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1096: { $auto$alumacc.cc:490:replace_alu$1094 [0] $auto$alumacc.cc:490:replace_alu$1094 [1] $auto$alumacc.cc:490:replace_alu$1094 [2] $auto$alumacc.cc:490:replace_alu$1094 [3] $auto$alumacc.cc:490:replace_alu$1094 [4] $auto$alumacc.cc:490:replace_alu$1094 [5] $auto$alumacc.cc:490:replace_alu$1094 [6] $auto$alumacc.cc:490:replace_alu$1094 [7] $auto$alumacc.cc:490:replace_alu$1094 [8] $auto$alumacc.cc:490:replace_alu$1094 [9] }
  Optimizing cells in module \pong_game.
Performed a total of 42 changes.

14.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

14.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 3 unused cells and 43 unused wires.
<suppressed ~4 debug messages>

14.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.19.9. Rerunning OPT passes. (Maybe there is more to do..)

14.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pong_game..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

14.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pong_game.
Performed a total of 0 changes.

14.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

14.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.19.16. Finished OPT passes. (There is nothing left to do.)

14.20. Executing FSM pass (extract and optimize FSM).

14.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking pong_game.pong.vga_color_r as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

14.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

14.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

14.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

14.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

14.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

14.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

14.21. Executing OPT pass (performing simple optimizations).

14.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

14.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.21.5. Finished fast OPT passes.

14.22. Executing MEMORY pass.

14.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

14.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

14.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

14.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

14.25. Executing TECHMAP pass (map to technology primitives).

14.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

14.25.2. Continuing TECHMAP pass.
No more expansions possible.

14.26. Executing ICE40_BRAMINIT pass.

14.27. Executing OPT pass (performing simple optimizations).

14.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~4 debug messages>

14.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

14.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

14.27.5. Finished fast OPT passes.

14.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

14.29. Executing OPT pass (performing simple optimizations).

14.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pong_game..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

14.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pong_game.
    Consolidated identical input bits for $mux cell $techmap\osd.score_register.$procmux$258:
      Old ports: A={ 3'100 $techmap\osd.score_register.$8\level[3:0] [0] }, B=4'0111, Y=$techmap\osd.score_register.$7\level[3:0]
      New ports: A={ 2'10 $techmap\osd.score_register.$8\level[3:0] [0] }, B=3'011, Y={ $techmap\osd.score_register.$7\level[3:0] [3] $techmap\osd.score_register.$7\level[3:0] [1:0] }
      New connections: $techmap\osd.score_register.$7\level[3:0] [2] = $techmap\osd.score_register.$7\level[3:0] [1]
    Consolidated identical input bits for $mux cell $techmap\pong.$procmux$615:
      Old ports: A=9'000000000, B=9'111111111, Y=$techmap\pong.$procmux$615_Y
      New ports: A=1'0, B=1'1, Y=$techmap\pong.$procmux$615_Y [0]
      New connections: $techmap\pong.$procmux$615_Y [8:1] = { $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] }
    Consolidated identical input bits for $mux cell $techmap\pong.$ternary$pong.v:131$72:
      Old ports: A=10'0000000001, B=10'1111111111, Y=$techmap\pong.$ternary$pong.v:131$72_Y [9:0]
      New ports: A=1'0, B=1'1, Y=$techmap\pong.$ternary$pong.v:131$72_Y [1]
      New connections: { $techmap\pong.$ternary$pong.v:131$72_Y [9:2] $techmap\pong.$ternary$pong.v:131$72_Y [0] } = { $techmap\pong.$ternary$pong.v:131$72_Y [1] $techmap\pong.$ternary$pong.v:131$72_Y [1] $techmap\pong.$ternary$pong.v:131$72_Y [1] $techmap\pong.$ternary$pong.v:131$72_Y [1] $techmap\pong.$ternary$pong.v:131$72_Y [1] $techmap\pong.$ternary$pong.v:131$72_Y [1] $techmap\pong.$ternary$pong.v:131$72_Y [1] $techmap\pong.$ternary$pong.v:131$72_Y [1] 1'1 }
    Consolidated identical input bits for $mux cell $techmap\pong.$ternary$pong.v:134$76:
      Old ports: A=10'0000000001, B=10'1111111111, Y=$techmap\pong.$ternary$pong.v:134$76_Y [9:0]
      New ports: A=1'0, B=1'1, Y=$techmap\pong.$ternary$pong.v:134$76_Y [1]
      New connections: { $techmap\pong.$ternary$pong.v:134$76_Y [9:2] $techmap\pong.$ternary$pong.v:134$76_Y [0] } = { $techmap\pong.$ternary$pong.v:134$76_Y [1] $techmap\pong.$ternary$pong.v:134$76_Y [1] $techmap\pong.$ternary$pong.v:134$76_Y [1] $techmap\pong.$ternary$pong.v:134$76_Y [1] $techmap\pong.$ternary$pong.v:134$76_Y [1] $techmap\pong.$ternary$pong.v:134$76_Y [1] $techmap\pong.$ternary$pong.v:134$76_Y [1] $techmap\pong.$ternary$pong.v:134$76_Y [1] 1'1 }
  Optimizing cells in module \pong_game.
    Consolidated identical input bits for $mux cell $techmap\osd.score_register.$procmux$279:
      Old ports: A=$techmap\osd.score_register.$7\level[3:0], B=4'0110, Y=$techmap\osd.score_register.$6\level[3:0]
      New ports: A={ $techmap\osd.score_register.$7\level[3:0] [3] $techmap\osd.score_register.$7\level[3:0] [1:0] }, B=3'010, Y={ $techmap\osd.score_register.$6\level[3:0] [3] $techmap\osd.score_register.$6\level[3:0] [1:0] }
      New connections: $techmap\osd.score_register.$6\level[3:0] [2] = $techmap\osd.score_register.$6\level[3:0] [1]
    Consolidated identical input bits for $mux cell $techmap\pong.$procmux$618:
      Old ports: A=$techmap\pong.$procmux$615_Y, B=9'000111000, Y=$techmap\pong.$procmux$618_Y
      New ports: A={ $techmap\pong.$procmux$615_Y [0] $techmap\pong.$procmux$615_Y [0] }, B=2'10, Y={ $techmap\pong.$procmux$618_Y [3] $techmap\pong.$procmux$618_Y [0] }
      New connections: { $techmap\pong.$procmux$618_Y [8:4] $techmap\pong.$procmux$618_Y [2:1] } = { $techmap\pong.$procmux$618_Y [0] $techmap\pong.$procmux$618_Y [0] $techmap\pong.$procmux$618_Y [0] $techmap\pong.$procmux$618_Y [3] $techmap\pong.$procmux$618_Y [3] $techmap\pong.$procmux$618_Y [0] $techmap\pong.$procmux$618_Y [0] }
  Optimizing cells in module \pong_game.
    Consolidated identical input bits for $mux cell $techmap\pong.$procmux$621:
      Old ports: A=$techmap\pong.$procmux$618_Y, B=9'000000111, Y=$techmap\pong.$procmux$621_Y
      New ports: A={ $techmap\pong.$procmux$618_Y [0] $techmap\pong.$procmux$618_Y [3] $techmap\pong.$procmux$618_Y [0] }, B=3'001, Y={ $techmap\pong.$procmux$621_Y [6] $techmap\pong.$procmux$621_Y [3] $techmap\pong.$procmux$621_Y [0] }
      New connections: { $techmap\pong.$procmux$621_Y [8:7] $techmap\pong.$procmux$621_Y [5:4] $techmap\pong.$procmux$621_Y [2:1] } = { $techmap\pong.$procmux$621_Y [6] $techmap\pong.$procmux$621_Y [6] $techmap\pong.$procmux$621_Y [3] $techmap\pong.$procmux$621_Y [3] $techmap\pong.$procmux$621_Y [0] $techmap\pong.$procmux$621_Y [0] }
  Optimizing cells in module \pong_game.
    Consolidated identical input bits for $mux cell $techmap\pong.$procmux$624:
      Old ports: A=$techmap\pong.$procmux$621_Y, B=9'111000000, Y=$techmap\pong.$procmux$624_Y
      New ports: A={ $techmap\pong.$procmux$621_Y [6] $techmap\pong.$procmux$621_Y [3] $techmap\pong.$procmux$621_Y [0] }, B=3'100, Y={ $techmap\pong.$procmux$624_Y [6] $techmap\pong.$procmux$624_Y [3] $techmap\pong.$procmux$624_Y [0] }
      New connections: { $techmap\pong.$procmux$624_Y [8:7] $techmap\pong.$procmux$624_Y [5:4] $techmap\pong.$procmux$624_Y [2:1] } = { $techmap\pong.$procmux$624_Y [6] $techmap\pong.$procmux$624_Y [6] $techmap\pong.$procmux$624_Y [3] $techmap\pong.$procmux$624_Y [3] $techmap\pong.$procmux$624_Y [0] $techmap\pong.$procmux$624_Y [0] }
  Optimizing cells in module \pong_game.
    Consolidated identical input bits for $mux cell $techmap\pong.$procmux$626:
      Old ports: A=9'000000000, B=$techmap\pong.$procmux$624_Y, Y=$techmap\pong.$0\vga_color_r[8:0]
      New ports: A=3'000, B={ $techmap\pong.$procmux$624_Y [6] $techmap\pong.$procmux$624_Y [3] $techmap\pong.$procmux$624_Y [0] }, Y={ $techmap\pong.$0\vga_color_r[8:0] [6] $techmap\pong.$0\vga_color_r[8:0] [3] $techmap\pong.$0\vga_color_r[8:0] [0] }
      New connections: { $techmap\pong.$0\vga_color_r[8:0] [8:7] $techmap\pong.$0\vga_color_r[8:0] [5:4] $techmap\pong.$0\vga_color_r[8:0] [2:1] } = { $techmap\pong.$0\vga_color_r[8:0] [6] $techmap\pong.$0\vga_color_r[8:0] [6] $techmap\pong.$0\vga_color_r[8:0] [3] $techmap\pong.$0\vga_color_r[8:0] [3] $techmap\pong.$0\vga_color_r[8:0] [0] $techmap\pong.$0\vga_color_r[8:0] [0] }
  Optimizing cells in module \pong_game.
Performed a total of 9 changes.

14.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

14.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.29.9. Rerunning OPT passes. (Maybe there is more to do..)

14.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pong_game..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

14.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pong_game.
Performed a total of 0 changes.

14.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

14.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.29.16. Finished OPT passes. (There is nothing left to do.)

14.30. Executing TECHMAP pass (map to technology primitives).

14.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

14.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

14.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=1\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=10\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=10\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=7\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=32 for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
No more expansions possible.
<suppressed ~1323 debug messages>

14.31. Executing ICE40_OPT pass (performing simple optimizations).

14.31.1. Running ICE40 specific optimizations.

14.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~2720 debug messages>

14.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~5553 debug messages>
Removed a total of 1851 cells.

14.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 699 unused cells and 1761 unused wires.
<suppressed ~700 debug messages>

14.31.6. Rerunning OPT passes. (Removed registers in this run.)

14.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1008.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1021.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1034.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1047.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1060.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1071.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1071.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1082.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1071.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1093.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1060.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1106.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1115.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1071.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1124.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1071.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1133.slice[0].carry: CO=\button_left.clk_div [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1136.slice[0].carry: CO=\button_left.debounce_cnt [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1139.slice[0].carry: CO=\button_right.clk_div [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1142.slice[0].carry: CO=\button_right.debounce_cnt [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1145.slice[0].carry: CO=\clock_generator.increment_counter [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1148.slice[0].carry: CO=\osd.next_char_addr [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1154.slice[0].carry: CO=\osd.char_line_address [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1160.slice[0].carry: CO=\osd.osd_time_base.pos_count [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1163.slice[0].carry: CO=\osd.score_register.bcd_8bit_counter.c0.q [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1166.slice[0].carry: CO=\osd.score_register.bcd_8bit_counter.c1.q [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1169.slice[0].carry: CO=\pong.ball_x [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1172.slice[0].carry: CO=\pong.ball_y [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1175.slice[0].carry: CO=\pong.paddle_position [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1187.slice[0].carry: CO=\pong.paddle_position [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1190.slice[0].carry: CO=\rst_gen.rst_cnt [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1193.slice[0].carry: CO=\vga.timer_t [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1196.slice[0].carry: CO=\vga.c_hor [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1199.slice[0].carry: CO=\vga.c_ver [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$785.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$785.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$796.slice[0].carry: CO=\vga.c_hor [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$801.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$806.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$817.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$785.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$833.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$785.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$838.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$849.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [11]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [12]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [13]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [14]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [15]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [16]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [17]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [18]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [19]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [20]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [21]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [22]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [23]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [24]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [25]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [26]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [27]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [28]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [29]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [30]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$860.slice[31].carry: CO=$auto$alumacc.cc:474:replace_alu$860.C [31]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [11]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [12]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [13]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [14]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [15]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [16]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [17]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [18]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [19]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [20]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [21]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [22]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [23]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [24]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [25]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [26]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [27]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [28]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [29]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [30]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$865.slice[31].carry: CO=$auto$alumacc.cc:474:replace_alu$865.C [31]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [11]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [12]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [13]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [14]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [15]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [16]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [17]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [18]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [19]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [20]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [21]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [22]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [23]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [24]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [25]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [26]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [27]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [28]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [29]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [30]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$870.slice[31].carry: CO=$auto$alumacc.cc:474:replace_alu$870.C [31]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$875.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$875.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$886.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1071.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [11]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [12]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [13]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [14]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [15]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [16]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [17]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [18]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [19]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [20]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [21]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [22]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [23]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [24]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [25]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [26]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [27]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [28]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [29]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [30]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$897.slice[31].carry: CO=$auto$alumacc.cc:474:replace_alu$897.C [31]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [11]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [12]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [13]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [14]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [15]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [16]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [17]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [18]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [19]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [20]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [21]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [22]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [23]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [24]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [25]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [26]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [27]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [28]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [29]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [30]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$920.slice[31].carry: CO=$auto$alumacc.cc:474:replace_alu$920.C [31]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$860.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [11]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [12]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [13]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [14]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [15]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [16]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [17]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [18]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [19]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [20]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [21]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [22]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [23]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [24]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [25]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [26]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [27]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [28]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [29]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [30]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$929.slice[31].carry: CO=$auto$alumacc.cc:474:replace_alu$929.C [31]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$938.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1071.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$956.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$969.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$982.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$995.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1008.BB [0]
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1133.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1136.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1139.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1142.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1145.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1148.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1154.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1160.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1163.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1166.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1169.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1172.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1175.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1187.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1190.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1193.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1196.slice[1].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1199.slice[1].adder back to logic.

14.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~282 debug messages>

14.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

14.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

14.31.12. Rerunning OPT passes. (Removed registers in this run.)

14.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1060.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$1060.BB [1]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1106.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$1060.BB [1]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$801.slice[1].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$806.slice[1].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[1].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$838.slice[1].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$849.slice[1].carry: CO=\vga.timer_t [1]
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[2].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[2].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[2].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[2].adder back to logic.

14.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~55 debug messages>

14.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

14.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

14.31.18. Rerunning OPT passes. (Removed registers in this run.)

14.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[2].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[2].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[2].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[2].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$801.slice[2].carry: CO=\vga.c_ver [2]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$806.slice[2].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[2].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$838.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[3].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[3].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[3].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[3].adder back to logic.

14.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~56 debug messages>

14.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

14.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

14.31.24. Rerunning OPT passes. (Removed registers in this run.)

14.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[3].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[3].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[3].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[3].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$806.slice[3].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[3].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$838.slice[3].carry: CO=1'1
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[4].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[4].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[4].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[4].adder back to logic.

14.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~58 debug messages>

14.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

14.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

14.31.30. Rerunning OPT passes. (Removed registers in this run.)

14.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[4].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[4].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[4].carry: CO=\pong.ball_y [4]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[4].carry: CO=\pong.ball_x [4]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$806.slice[4].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[4].carry: CO=1'1
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$838.slice[4].carry: CO=\vga.c_hor [4]
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[5].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[5].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1181.slice[5].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1184.slice[5].adder back to logic.

14.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~54 debug messages>

14.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

14.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 1 unused cells and 15 unused wires.
<suppressed ~2 debug messages>

14.31.36. Rerunning OPT passes. (Removed registers in this run.)

14.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[5].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[5].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$806.slice[5].carry: CO=$auto$alumacc.cc:474:replace_alu$806.BB [5]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[5].carry: CO=1'1
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[6].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[6].adder back to logic.

14.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~29 debug messages>

14.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 1 unused cells and 8 unused wires.
<suppressed ~2 debug messages>

14.31.42. Rerunning OPT passes. (Removed registers in this run.)

14.31.43. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[6].carry: CO=1'0
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[6].carry: CO=\pong.paddle_position [6]
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[6].carry: CO=1'1
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1157.slice[7].adder back to logic.
Mapping SB_LUT4 cell pong_game.$auto$alumacc.cc:474:replace_alu$1178.slice[7].adder back to logic.

14.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~198 debug messages>

14.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

14.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 0 unused cells and 115 unused wires.
<suppressed ~1 debug messages>

14.31.48. Rerunning OPT passes. (Removed registers in this run.)

14.31.49. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell pong_game.$auto$alumacc.cc:474:replace_alu$828.slice[7].carry: CO=\vga.c_hor [7]

14.31.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.31.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.31.52. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.31.54. Rerunning OPT passes. (Removed registers in this run.)

14.31.55. Running ICE40 specific optimizations.

14.31.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.31.57. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.31.58. Executing OPT_RMDFF pass (remove dff with constant values).

14.31.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.31.60. Finished OPT passes. (There is nothing left to do.)

14.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

14.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module pong_game:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1281 to $_DFFE_PP_ for $techmap\button_right.$0\button_s[0:0] -> \button_right.button_s.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1302 to $_DFFE_PP_ for $techmap\button_left.$0\button_s[0:0] -> \button_left.button_s.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1328 to $_DFFE_PP_ for $auto$simplemap.cc:309:simplemap_lut$9713 -> \button_right.clk_div [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1338 to $_DFFE_PP_ for $techmap\button_right.$0\debounce_cnt[14:0] [1] -> \button_right.debounce_cnt [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1352 to $_DFFE_PP_ for $techmap\button_right.$0\button_r[0:0] -> \button_right.button_r.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1501 to $_DFFE_PP_ for $techmap\pong.$0\run[0:0] -> \pong.run.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1503 to $_DFFE_PP_ for $auto$simplemap.cc:309:simplemap_lut$9675 -> \button_left.clk_div [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1513 to $_DFFE_PP_ for $techmap\button_left.$0\debounce_cnt[14:0] [1] -> \button_left.debounce_cnt [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1527 to $_DFFE_PP_ for $techmap\button_left.$0\button_r[0:0] -> \button_left.button_r.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1603 to $_DFFE_PP_ for $techmap\rst_gen.$0\rst_cnt[3:0] [0] -> \rst_gen.rst_cnt [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1604 to $_DFFE_PP_ for $techmap\rst_gen.$0\rst_cnt[3:0] [1] -> \rst_gen.rst_cnt [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1605 to $_DFFE_PP_ for $techmap\rst_gen.$0\rst_cnt[3:0] [2] -> \rst_gen.rst_cnt [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2316 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [0] -> \vga.c_row [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2317 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [1] -> \vga.c_row [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2318 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [2] -> \vga.c_row [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2319 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [3] -> \vga.c_row [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2320 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [4] -> \vga.c_row [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2321 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [5] -> \vga.c_row [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2322 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [6] -> \vga.c_row [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2323 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [7] -> \vga.c_row [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2324 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [8] -> \vga.c_row [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2325 to $_DFFE_PP_ for $techmap\vga.$0\c_row[9:0] [9] -> \vga.c_row [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2329 to $_DFFE_PP_ for $techmap\clock_generator.$0\increment_counter[18:0] [1] -> \clock_generator.increment_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2446 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [0] -> \vga.c_ver [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2447 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [1] -> \vga.c_ver [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2448 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [2] -> \vga.c_ver [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2449 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [3] -> \vga.c_ver [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2450 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [4] -> \vga.c_ver [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2451 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [5] -> \vga.c_ver [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2452 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [6] -> \vga.c_ver [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2453 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [7] -> \vga.c_ver [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2454 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [8] -> \vga.c_ver [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2455 to $_DFFE_PP_ for $techmap\vga.$0\c_ver[9:0] [9] -> \vga.c_ver [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2457 to $_DFFE_PP_ for $techmap\vga.$0\c_hor[9:0] [1] -> \vga.c_hor [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2466 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [0] -> \vga.c_col [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2467 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [1] -> \vga.c_col [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2468 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [2] -> \vga.c_col [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2469 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [3] -> \vga.c_col [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2470 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [4] -> \vga.c_col [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2471 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [5] -> \vga.c_col [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2472 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [6] -> \vga.c_col [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2473 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [7] -> \vga.c_col [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2474 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [8] -> \vga.c_col [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2475 to $_DFFE_PP_ for $techmap\vga.$0\c_col[9:0] [9] -> \vga.c_col [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2478 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [0] -> \vga.timer_t [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2479 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [1] -> \vga.timer_t [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2480 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [2] -> \vga.timer_t [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2481 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [3] -> \vga.timer_t [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2482 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [4] -> \vga.timer_t [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2483 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [5] -> \vga.timer_t [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2484 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [6] -> \vga.timer_t [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2485 to $_DFFE_PP_ for $techmap\vga.$0\timer_t[7:0] [7] -> \vga.timer_t [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3120 to $_DFFE_PP_ for $techmap\osd.osd_time_base.$0\pos_count[3:0] [1] -> \osd.osd_time_base.pos_count [1].
  converting $_DFF_PN0_ cell $auto$simplemap.cc:496:simplemap_adff$1727 to $__DFFE_PN0 for $techmap\pong.$0\ball_y_direction[0:0] -> \pong.ball_y_direction.
  converting $_DFF_PN0_ cell $auto$simplemap.cc:496:simplemap_adff$1728 to $__DFFE_PN0 for $techmap\pong.$0\ball_x_direction[0:0] -> \pong.ball_x_direction.
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1739 to $__DFFE_NN0 for $techmap\pong.$0\ball_y[9:0] [0] -> \pong.ball_y [0].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1740 to $__DFFE_NN0 for $techmap\pong.$0\ball_y[9:0] [1] -> \pong.ball_y [1].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1741 to $__DFFE_NN0 for $techmap\pong.$0\ball_y[9:0] [2] -> \pong.ball_y [2].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1742 to $__DFFE_NN1 for $techmap\pong.$0\ball_y[9:0] [3] -> \pong.ball_y [3].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1743 to $__DFFE_NN0 for $techmap\pong.$0\ball_y[9:0] [4] -> \pong.ball_y [4].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1744 to $__DFFE_NN1 for $techmap\pong.$0\ball_y[9:0] [5] -> \pong.ball_y [5].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1745 to $__DFFE_NN1 for $techmap\pong.$0\ball_y[9:0] [6] -> \pong.ball_y [6].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1746 to $__DFFE_NN1 for $techmap\pong.$0\ball_y[9:0] [7] -> \pong.ball_y [7].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1747 to $__DFFE_NN0 for $techmap\pong.$0\ball_y[9:0] [8] -> \pong.ball_y [8].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1748 to $__DFFE_NN0 for $techmap\pong.$0\ball_y[9:0] [9] -> \pong.ball_y [9].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1749 to $__DFFE_NN0 for $techmap\pong.$0\ball_x[9:0] [0] -> \pong.ball_x [0].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1750 to $__DFFE_NN0 for $techmap\pong.$0\ball_x[9:0] [1] -> \pong.ball_x [1].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1751 to $__DFFE_NN0 for $techmap\pong.$0\ball_x[9:0] [2] -> \pong.ball_x [2].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1752 to $__DFFE_NN1 for $techmap\pong.$0\ball_x[9:0] [3] -> \pong.ball_x [3].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1753 to $__DFFE_NN1 for $techmap\pong.$0\ball_x[9:0] [4] -> \pong.ball_x [4].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1754 to $__DFFE_NN1 for $techmap\pong.$0\ball_x[9:0] [5] -> \pong.ball_x [5].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1755 to $__DFFE_NN0 for $techmap\pong.$0\ball_x[9:0] [6] -> \pong.ball_x [6].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1756 to $__DFFE_NN0 for $techmap\pong.$0\ball_x[9:0] [7] -> \pong.ball_x [7].
  converting $_DFF_NN1_ cell $auto$simplemap.cc:496:simplemap_adff$1757 to $__DFFE_NN1 for $techmap\pong.$0\ball_x[9:0] [8] -> \pong.ball_x [8].
  converting $_DFF_NN0_ cell $auto$simplemap.cc:496:simplemap_adff$1758 to $__DFFE_NN0 for $techmap\pong.$0\ball_x[9:0] [9] -> \pong.ball_x [9].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1759 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [0] -> \pong.paddle_position [0].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1760 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [1] -> \pong.paddle_position [1].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1761 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [2] -> \pong.paddle_position [2].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1762 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [3] -> \pong.paddle_position [3].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1763 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [4] -> \pong.paddle_position [4].
  converting $_DFF_PP1_ cell $auto$simplemap.cc:496:simplemap_adff$1764 to $__DFFE_PP1 for $techmap\pong.$0\paddle_position[9:0] [5] -> \pong.paddle_position [5].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1765 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [6] -> \pong.paddle_position [6].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1766 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [7] -> \pong.paddle_position [7].
  converting $_DFF_PP1_ cell $auto$simplemap.cc:496:simplemap_adff$1767 to $__DFFE_PP1 for $techmap\pong.$0\paddle_position[9:0] [8] -> \pong.paddle_position [8].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$1768 to $__DFFE_PP0 for $techmap\pong.$0\paddle_position[9:0] [9] -> \pong.paddle_position [9].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$2257 to $__DFFE_PP0 for $auto$simplemap.cc:309:simplemap_lut$9770 -> \osd.next_char_addr [1].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$2263 to $__DFFE_PP0 for $auto$simplemap.cc:309:simplemap_lut$9789 -> \osd.char_line_address [1].

14.34. Executing TECHMAP pass (map to technology primitives).

14.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

14.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$__DFFE_PN0 for cells of type $__DFFE_PN0.
Using template \$__DFFE_NN1 for cells of type $__DFFE_NN1.
Using template \$__DFFE_NN0 for cells of type $__DFFE_NN0.
Using template \$__DFFE_PP1 for cells of type $__DFFE_PP1.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFF_PP1_ for cells of type $_DFF_PP1_.
Using template \$__DFFE_PP0 for cells of type $__DFFE_PP0.
No more expansions possible.
<suppressed ~197 debug messages>

14.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~245 debug messages>

14.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping pong_game.$techmap$techmap11644$auto$simplemap.cc:496:simplemap_adff$1757.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11640$auto$simplemap.cc:496:simplemap_adff$1728.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:22$11601 ($logic_not).
Mapping pong_game.$techmap$techmap11639$auto$simplemap.cc:496:simplemap_adff$1727.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:22$11601 ($logic_not).
Mapping pong_game.$techmap$techmap11642$auto$simplemap.cc:496:simplemap_adff$1746.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11693$auto$simplemap.cc:496:simplemap_adff$1740.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11694$auto$simplemap.cc:496:simplemap_adff$1741.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11695$auto$simplemap.cc:496:simplemap_adff$1742.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11696$auto$simplemap.cc:496:simplemap_adff$1743.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11697$auto$simplemap.cc:496:simplemap_adff$1744.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11698$auto$simplemap.cc:496:simplemap_adff$1745.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11699$auto$simplemap.cc:496:simplemap_adff$1747.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11700$auto$simplemap.cc:496:simplemap_adff$1748.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11701$auto$simplemap.cc:496:simplemap_adff$1749.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11702$auto$simplemap.cc:496:simplemap_adff$1750.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11703$auto$simplemap.cc:496:simplemap_adff$1751.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11704$auto$simplemap.cc:496:simplemap_adff$1752.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11705$auto$simplemap.cc:496:simplemap_adff$1753.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11706$auto$simplemap.cc:496:simplemap_adff$1754.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:21$11600 ($logic_not).
Mapping pong_game.$techmap$techmap11707$auto$simplemap.cc:496:simplemap_adff$1755.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11643$auto$simplemap.cc:496:simplemap_adff$1739.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11708$auto$simplemap.cc:496:simplemap_adff$1756.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).
Mapping pong_game.$techmap$techmap11709$auto$simplemap.cc:496:simplemap_adff$1758.$logic_not$/usr/bin/../share/yosys/ice40/cells_map.v:20$11599 ($logic_not).

14.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in pong_game.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6944 (SB_DFF): \osd.score_register.bcd_8bit_counter.c1.q [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1327 (SB_DFF): \button_right.clk_div [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1511 (SB_DFF): \button_left.clk_div [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1328 (SB_DFFE): \button_right.clk_div [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1329 (SB_DFF): \button_right.clk_div [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1330 (SB_DFF): \button_right.clk_div [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1331 (SB_DFF): \button_right.clk_div [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1332 (SB_DFF): \button_right.clk_div [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1333 (SB_DFF): \button_right.clk_div [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1334 (SB_DFF): \button_right.clk_div [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1337 (SB_DFF): \button_right.debounce_cnt [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1335 (SB_DFF): \button_right.clk_div [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1338 (SB_DFFE): \button_right.debounce_cnt [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1339 (SB_DFF): \button_right.debounce_cnt [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1340 (SB_DFF): \button_right.debounce_cnt [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1341 (SB_DFF): \button_right.debounce_cnt [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1342 (SB_DFF): \button_right.debounce_cnt [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1343 (SB_DFF): \button_right.debounce_cnt [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1344 (SB_DFF): \button_right.debounce_cnt [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1346 (SB_DFF): \button_right.debounce_cnt [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1336 (SB_DFF): \button_right.clk_div [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1347 (SB_DFF): \button_right.debounce_cnt [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1348 (SB_DFF): \button_right.debounce_cnt [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1349 (SB_DFF): \button_right.debounce_cnt [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1350 (SB_DFF): \button_right.debounce_cnt [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1351 (SB_DFF): \button_right.debounce_cnt [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1345 (SB_DFF): \button_right.debounce_cnt [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1501 (SB_DFFE): \pong.run = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1507 (SB_DFF): \button_left.clk_div [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1503 (SB_DFFE): \button_left.clk_div [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1504 (SB_DFF): \button_left.clk_div [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1505 (SB_DFF): \button_left.clk_div [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6901 (SB_DFF): \osd.score_register.bcd_8bit_counter.c0.tc = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1506 (SB_DFF): \button_left.clk_div [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1509 (SB_DFF): \button_left.clk_div [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1510 (SB_DFF): \button_left.clk_div [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1512 (SB_DFF): \button_left.debounce_cnt [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1513 (SB_DFFE): \button_left.debounce_cnt [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1514 (SB_DFF): \button_left.debounce_cnt [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1515 (SB_DFF): \button_left.debounce_cnt [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1516 (SB_DFF): \button_left.debounce_cnt [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1517 (SB_DFF): \button_left.debounce_cnt [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1518 (SB_DFF): \button_left.debounce_cnt [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1502 (SB_DFF): \button_left.clk_div [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1519 (SB_DFF): \button_left.debounce_cnt [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1521 (SB_DFF): \button_left.debounce_cnt [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1522 (SB_DFF): \button_left.debounce_cnt [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1523 (SB_DFF): \button_left.debounce_cnt [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1524 (SB_DFF): \button_left.debounce_cnt [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1525 (SB_DFF): \button_left.debounce_cnt [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1526 (SB_DFF): \button_left.debounce_cnt [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1520 (SB_DFF): \button_left.debounce_cnt [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1605 (SB_DFFE): \rst_gen.rst_cnt [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1604 (SB_DFFE): \rst_gen.rst_cnt [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1606 (SB_DFF): \rst_gen.rst_cnt [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1603 (SB_DFFE): \rst_gen.rst_cnt [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2322 (SB_DFFE): \vga.c_row [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2323 (SB_DFFE): \vga.c_row [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2317 (SB_DFFE): \vga.c_row [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2318 (SB_DFFE): \vga.c_row [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2319 (SB_DFFE): \vga.c_row [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2320 (SB_DFFE): \vga.c_row [4] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$2262 (SB_DFFR): \osd.char_line_address [0] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$2263 (SB_DFFER): \osd.char_line_address [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2321 (SB_DFFE): \vga.c_row [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2324 (SB_DFFE): \vga.c_row [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1508 (SB_DFF): \button_left.clk_div [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2325 (SB_DFFE): \vga.c_row [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2316 (SB_DFFE): \vga.c_row [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2445 (SB_DFF): \vga.disp_en = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2466 (SB_DFFE): \vga.c_col [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2467 (SB_DFFE): \vga.c_col [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2468 (SB_DFFE): \vga.c_col [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2469 (SB_DFFE): \vga.c_col [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2470 (SB_DFFE): \vga.c_col [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2471 (SB_DFFE): \vga.c_col [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2472 (SB_DFFE): \vga.c_col [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2473 (SB_DFFE): \vga.c_col [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2475 (SB_DFFE): \vga.c_col [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2484 (SB_DFFE): \vga.timer_t [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2476 (SB_DFF): \vga.rst = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2479 (SB_DFFE): \vga.timer_t [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2480 (SB_DFFE): \vga.timer_t [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2481 (SB_DFFE): \vga.timer_t [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2482 (SB_DFFE): \vga.timer_t [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2474 (SB_DFFE): \vga.c_col [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2483 (SB_DFFE): \vga.timer_t [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2485 (SB_DFFE): \vga.timer_t [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3119 (SB_DFF): \osd.osd_time_base.pos_count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3120 (SB_DFFE): \osd.osd_time_base.pos_count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3121 (SB_DFF): \osd.osd_time_base.pos_count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6840 (SB_DFF): \osd.shift_register.tmp [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6834 (SB_DFF): \osd.shift_register.tmp [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6835 (SB_DFF): \osd.shift_register.tmp [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6836 (SB_DFF): \osd.shift_register.tmp [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6837 (SB_DFF): \osd.shift_register.tmp [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6838 (SB_DFF): \osd.shift_register.tmp [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3122 (SB_DFF): \osd.osd_time_base.pos_count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6839 (SB_DFF): \osd.shift_register.tmp [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2478 (SB_DFFE): \vga.timer_t [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6841 (SB_DFF): \osd.shift_register.tmp [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6898 (SB_DFF): \osd.score_register.bcd_8bit_counter.c0.q [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6899 (SB_DFF): \osd.score_register.bcd_8bit_counter.c0.q [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6897 (SB_DFF): \osd.score_register.bcd_8bit_counter.c0.q [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6900 (SB_DFF): \osd.score_register.bcd_8bit_counter.c0.q [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6941 (SB_DFF): \osd.score_register.bcd_8bit_counter.c1.q [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6942 (SB_DFF): \osd.score_register.bcd_8bit_counter.c1.q [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6943 (SB_DFF): \osd.score_register.bcd_8bit_counter.c1.q [2] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$2264 (SB_DFFR): \osd.char_line_address [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2255 (SB_DFF): \osd.clock_divider = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$2260 (SB_DFFR): \osd.char_line_counter_r [0] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$2261 (SB_DFFS): \osd.char_line_counter_r [1] = 0

14.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in pong_game.
  Merging $auto$simplemap.cc:277:simplemap_mux$6948 (A=$techmap\osd.score_register.bcd_8bit_counter.c1.$procmux$219_Y [3], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6944 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1360 (A=1'0, B=$techmap\button_right.$procmux$522_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1337 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1361 (A=1'0, B=$techmap\button_right.$procmux$522_Y [1], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1338 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1362 (A=1'0, B=$techmap\button_right.$procmux$522_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1339 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1363 (A=1'0, B=$techmap\button_right.$procmux$522_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1340 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1364 (A=1'0, B=$techmap\button_right.$procmux$522_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1341 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1365 (A=1'0, B=$techmap\button_right.$procmux$522_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1342 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1366 (A=1'0, B=$techmap\button_right.$procmux$522_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1343 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1367 (A=1'0, B=$techmap\button_right.$procmux$522_Y [7], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1344 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1369 (A=1'0, B=$techmap\button_right.$procmux$522_Y [9], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1346 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1370 (A=1'0, B=$techmap\button_right.$procmux$522_Y [10], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1347 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1371 (A=1'0, B=$techmap\button_right.$procmux$522_Y [11], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1348 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1372 (A=1'0, B=$techmap\button_right.$procmux$522_Y [12], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1349 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1373 (A=1'0, B=$techmap\button_right.$procmux$522_Y [13], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1350 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1374 (A=1'0, B=$techmap\button_right.$procmux$522_Y [14], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1351 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1368 (A=1'0, B=$techmap\button_right.$procmux$522_Y [8], S=$auto$simplemap.cc:256:simplemap_eqne$1407) into $auto$simplemap.cc:420:simplemap_dff$1345 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2348 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$9748 [1], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2329 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6902 (A=$auto$simplemap.cc:309:simplemap_lut$1640, B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6901 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1530 (A=1'0, B=$techmap\button_left.$procmux$522_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1512 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1531 (A=1'0, B=$techmap\button_left.$procmux$522_Y [1], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1513 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1532 (A=1'0, B=$techmap\button_left.$procmux$522_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1514 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1533 (A=1'0, B=$techmap\button_left.$procmux$522_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1515 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1534 (A=1'0, B=$techmap\button_left.$procmux$522_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1516 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1535 (A=1'0, B=$techmap\button_left.$procmux$522_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1517 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1536 (A=1'0, B=$techmap\button_left.$procmux$522_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1518 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1537 (A=1'0, B=$techmap\button_left.$procmux$522_Y [7], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1519 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1539 (A=1'0, B=$techmap\button_left.$procmux$522_Y [9], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1521 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1540 (A=1'0, B=$techmap\button_left.$procmux$522_Y [10], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1522 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1541 (A=1'0, B=$techmap\button_left.$procmux$522_Y [11], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1523 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1542 (A=1'0, B=$techmap\button_left.$procmux$522_Y [12], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1524 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1543 (A=1'0, B=$techmap\button_left.$procmux$522_Y [13], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1525 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1544 (A=1'0, B=$techmap\button_left.$procmux$522_Y [14], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1526 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1538 (A=1'0, B=$techmap\button_left.$procmux$522_Y [8], S=$auto$simplemap.cc:256:simplemap_eqne$1577) into $auto$simplemap.cc:420:simplemap_dff$1520 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1773 (A=1'0, B=$techmap\pong.$procmux$624_Y [5], S=\osd.dsp_en) into $auto$simplemap.cc:420:simplemap_dff$1734 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1610 (A=$auto$wreduce.cc:455:run$713 [3], B=1'1, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$1606 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1772 (A=1'0, B=$techmap\pong.$procmux$624_Y [2], S=\osd.dsp_en) into $auto$simplemap.cc:420:simplemap_dff$1731 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2533 (A=1'0, B=$techmap\vga.$procmux$554_Y [6], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2322 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2534 (A=1'0, B=$techmap\vga.$procmux$554_Y [7], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2323 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2528 (A=1'0, B=$techmap\vga.$procmux$554_Y [1], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2317 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2529 (A=1'0, B=$techmap\vga.$procmux$554_Y [2], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2318 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2530 (A=1'0, B=$techmap\vga.$procmux$554_Y [3], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2319 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2531 (A=1'0, B=$techmap\vga.$procmux$554_Y [4], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2320 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2532 (A=1'0, B=$techmap\vga.$procmux$554_Y [5], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2321 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2535 (A=1'0, B=$techmap\vga.$procmux$554_Y [8], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2324 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2353 (A=1'0, B=$auto$wreduce.cc:455:run$702 [6], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2334 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2536 (A=1'0, B=$techmap\vga.$procmux$554_Y [9], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2325 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2349 (A=1'0, B=$auto$wreduce.cc:455:run$702 [2], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2330 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2350 (A=1'0, B=$auto$wreduce.cc:455:run$702 [3], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2331 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2351 (A=1'0, B=$auto$wreduce.cc:455:run$702 [4], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2332 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2527 (A=1'0, B=$techmap\vga.$procmux$554_Y [0], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2316 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2352 (A=1'0, B=$auto$wreduce.cc:455:run$702 [5], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2333 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2354 (A=1'0, B=$auto$wreduce.cc:455:run$702 [7], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2335 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2355 (A=1'0, B=$auto$wreduce.cc:455:run$702 [8], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2336 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2356 (A=1'0, B=$auto$wreduce.cc:455:run$702 [9], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2337 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2357 (A=1'0, B=$auto$wreduce.cc:455:run$702 [10], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2338 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2358 (A=1'0, B=$auto$wreduce.cc:455:run$702 [11], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2339 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2359 (A=1'0, B=$auto$wreduce.cc:455:run$702 [12], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2340 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2360 (A=1'0, B=$auto$wreduce.cc:455:run$702 [13], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2341 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2361 (A=1'0, B=$auto$wreduce.cc:455:run$702 [14], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2342 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2362 (A=1'0, B=$auto$wreduce.cc:455:run$702 [15], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2343 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2584 (A=$techmap\vga.$procmux$537_Y [7], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2453 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2583 (A=$techmap\vga.$procmux$537_Y [6], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2452 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2578 (A=$techmap\vga.$procmux$537_Y [1], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2447 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2579 (A=$techmap\vga.$procmux$537_Y [2], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2448 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2580 (A=$techmap\vga.$procmux$537_Y [3], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2449 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2581 (A=$techmap\vga.$procmux$537_Y [4], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2450 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2363 (A=1'0, B=$auto$wreduce.cc:455:run$702 [16], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2344 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2347 (A=1'0, B=$auto$wreduce.cc:455:run$702 [0], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2328 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2582 (A=$techmap\vga.$procmux$537_Y [5], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2451 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2585 (A=$techmap\vga.$procmux$537_Y [8], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2454 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2586 (A=$techmap\vga.$procmux$537_Y [9], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2455 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2557 (A=$techmap\vga.$procmux$546_Y [0], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2456 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2558 (A=$techmap\vga.$procmux$546_Y [1], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2457 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2559 (A=$techmap\vga.$procmux$546_Y [2], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2458 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2560 (A=$techmap\vga.$procmux$546_Y [3], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2459 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2561 (A=$techmap\vga.$procmux$546_Y [4], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2460 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2562 (A=$techmap\vga.$procmux$546_Y [5], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2461 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2563 (A=$techmap\vga.$procmux$546_Y [6], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2462 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2577 (A=$techmap\vga.$procmux$537_Y [0], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2446 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2564 (A=$techmap\vga.$procmux$546_Y [7], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2463 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2566 (A=$techmap\vga.$procmux$546_Y [9], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2465 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2497 (A=1'0, B=$techmap\vga.$procmux$562_Y [0], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2466 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2498 (A=1'0, B=$techmap\vga.$procmux$562_Y [1], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2467 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2499 (A=1'0, B=$techmap\vga.$procmux$562_Y [2], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2468 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2500 (A=1'0, B=$techmap\vga.$procmux$562_Y [3], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2469 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2501 (A=1'0, B=$techmap\vga.$procmux$562_Y [4], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2470 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2502 (A=1'0, B=$techmap\vga.$procmux$562_Y [5], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2471 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2503 (A=1'0, B=$techmap\vga.$procmux$562_Y [6], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2472 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2565 (A=$techmap\vga.$procmux$546_Y [8], B=1'0, S=\vga.rst) into $auto$simplemap.cc:420:simplemap_dff$2464 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2504 (A=1'0, B=$techmap\vga.$procmux$562_Y [7], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2473 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2506 (A=1'0, B=$techmap\vga.$procmux$562_Y [9], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2475 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2505 (A=1'0, B=$techmap\vga.$procmux$562_Y [8], S=$techmap\vga.$0\disp_en[0:0]) into $auto$simplemap.cc:420:simplemap_dff$2474 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3123 (A=$techmap\osd.osd_time_base.$procmux$508_Y [0], B=1'0, S=\osd.osd_start) into $auto$simplemap.cc:420:simplemap_dff$3119 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3124 (A=$techmap\osd.osd_time_base.$procmux$508_Y [1], B=1'0, S=\osd.osd_start) into $auto$simplemap.cc:420:simplemap_dff$3120 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3125 (A=$techmap\osd.osd_time_base.$procmux$508_Y [2], B=1'0, S=\osd.osd_start) into $auto$simplemap.cc:420:simplemap_dff$3121 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6842 (A=1'0, B=\osd.shift_register.data_in [0], S=\osd.load_seg) into $auto$simplemap.cc:420:simplemap_dff$6834 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3126 (A=$techmap\osd.osd_time_base.$procmux$508_Y [3], B=1'0, S=\osd.osd_start) into $auto$simplemap.cc:420:simplemap_dff$3122 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6904 (A=$techmap\osd.score_register.bcd_8bit_counter.c0.$procmux$219_Y [1], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6898 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6905 (A=$techmap\osd.score_register.bcd_8bit_counter.c0.$procmux$219_Y [2], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6899 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6903 (A=$techmap\osd.score_register.bcd_8bit_counter.c0.$procmux$219_Y [0], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6897 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6906 (A=$techmap\osd.score_register.bcd_8bit_counter.c0.$procmux$219_Y [3], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6900 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6945 (A=$techmap\osd.score_register.bcd_8bit_counter.c1.$procmux$219_Y [0], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6941 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6946 (A=$techmap\osd.score_register.bcd_8bit_counter.c1.$procmux$219_Y [1], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6942 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6947 (A=$techmap\osd.score_register.bcd_8bit_counter.c1.$procmux$219_Y [2], B=1'0, S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$6943 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1774 (A=1'0, B=$techmap\pong.$procmux$624_Y [8], S=\osd.dsp_en) into $auto$simplemap.cc:420:simplemap_dff$1736 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2365 (A=1'0, B=$auto$wreduce.cc:455:run$702 [18], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2346 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2364 (A=1'0, B=$auto$wreduce.cc:455:run$702 [17], S=\rst_gen.rst_cnt [3]) into $auto$simplemap.cc:420:simplemap_dff$2345 (SB_DFF).

14.39. Executing ICE40_OPT pass (performing simple optimizations).

14.39.1. Running ICE40 specific optimizations.

14.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.
<suppressed ~113 debug messages>

14.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
<suppressed ~846 debug messages>
Removed a total of 282 cells.

14.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

14.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..
Removed 107 unused cells and 1187 unused wires.
<suppressed ~108 debug messages>

14.39.6. Rerunning OPT passes. (Removed registers in this run.)

14.39.7. Running ICE40 specific optimizations.

14.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pong_game.

14.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pong_game'.
Removed a total of 0 cells.

14.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

14.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pong_game..

14.39.12. Finished OPT passes. (There is nothing left to do.)

14.40. Executing TECHMAP pass (map to technology primitives).

14.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

14.40.2. Continuing TECHMAP pass.
No more expansions possible.

14.41. Executing ABC pass (technology mapping using ABC).

14.41.1. Extracting gate netlist of module `\pong_game' to `<abc-temp-dir>/input.blif'..
Extracted 1410 gates and 1694 wires to a netlist network with 282 inputs and 240 outputs.

14.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     335.
ABC: Participating nodes from both networks       =     808.
ABC: Participating nodes from the first network   =     342. (  71.70 % of nodes)
ABC: Participating nodes from the second network  =     466. (  97.69 % of nodes)
ABC: Node pairs (any polarity)                    =     341. (  71.49 % of names can be moved)
ABC: Node pairs (same polarity)                   =     305. (  63.94 % of names can be moved)
ABC: Total runtime =     0.07 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

14.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      946
ABC RESULTS:        internal signals:     1172
ABC RESULTS:           input signals:      282
ABC RESULTS:          output signals:      240
Removing temp directory.
Removed 0 unused cells and 1047 unused wires.

14.42. Executing TECHMAP pass (map to technology primitives).

14.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

14.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110011100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101100010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111011100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001110 for cells of type $lut.
No more expansions possible.
<suppressed ~1501 debug messages>
Removed 0 unused cells and 934 unused wires.

14.43. Executing HIERARCHY pass (managing design hierarchy).

14.43.1. Analyzing design hierarchy..
Top module:  \pong_game

14.43.2. Analyzing design hierarchy..
Top module:  \pong_game
Removed 0 unused modules.

14.44. Printing statistics.

=== pong_game ===

   Number of wires:                804
   Number of wire bits:           1915
   Number of public wires:         155
   Number of public wire bits:     478
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1259
     SB_CARRY                      436
     SB_DFF                         31
     SB_DFFE                        18
     SB_DFFER                       12
     SB_DFFES                        2
     SB_DFFESR                      35
     SB_DFFNER                      12
     SB_DFFNES                       8
     SB_DFFR                         6
     SB_DFFS                         1
     SB_DFFSR                       71
     SB_DFFSS                        1
     SB_LUT4                       626

14.45. Executing CHECK pass (checking for obvious problems).
checking module pong_game..
found and reported 0 problems.

14.46. Executing BLIF backend.

End of script. Logfile hash: 9258e5d579
CPU: user 5.40s system 0.02s, MEM: 49.19 MB total, 43.66 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 28x opt_clean (1 sec), 20% 27x opt_expr (1 sec), 20% 24x opt_merge (1 sec), ...
